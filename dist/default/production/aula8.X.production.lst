

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 12 15:19:37 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F870
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	swtext1,local,class=CONST,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	swtext2,local,class=CONST,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	dabs	1,0x7E,2
    29  0000                     
    30                           ; Version 1.45
    31                           ; Generated 16/11/2017 GMT
    32                           ; 
    33                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC16F870 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64  0000                     	;# 
    65  0001                     	;# 
    66  0002                     	;# 
    67  0003                     	;# 
    68  0004                     	;# 
    69  0005                     	;# 
    70  0006                     	;# 
    71  0007                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000D                     	;# 
    76  000E                     	;# 
    77  000E                     	;# 
    78  000F                     	;# 
    79  0010                     	;# 
    80  0011                     	;# 
    81  0012                     	;# 
    82  0015                     	;# 
    83  0015                     	;# 
    84  0016                     	;# 
    85  0017                     	;# 
    86  0018                     	;# 
    87  0019                     	;# 
    88  001A                     	;# 
    89  001E                     	;# 
    90  001F                     	;# 
    91  0081                     	;# 
    92  0085                     	;# 
    93  0086                     	;# 
    94  0087                     	;# 
    95  008C                     	;# 
    96  008D                     	;# 
    97  008E                     	;# 
    98  0092                     	;# 
    99  0098                     	;# 
   100  0099                     	;# 
   101  009E                     	;# 
   102  009F                     	;# 
   103  010C                     	;# 
   104  010D                     	;# 
   105  010E                     	;# 
   106  010F                     	;# 
   107  018C                     	;# 
   108  018D                     	;# 
   109  0000                     	;# 
   110  0001                     	;# 
   111  0002                     	;# 
   112  0003                     	;# 
   113  0004                     	;# 
   114  0005                     	;# 
   115  0006                     	;# 
   116  0007                     	;# 
   117  000A                     	;# 
   118  000B                     	;# 
   119  000C                     	;# 
   120  000D                     	;# 
   121  000E                     	;# 
   122  000E                     	;# 
   123  000F                     	;# 
   124  0010                     	;# 
   125  0011                     	;# 
   126  0012                     	;# 
   127  0015                     	;# 
   128  0015                     	;# 
   129  0016                     	;# 
   130  0017                     	;# 
   131  0018                     	;# 
   132  0019                     	;# 
   133  001A                     	;# 
   134  001E                     	;# 
   135  001F                     	;# 
   136  0081                     	;# 
   137  0085                     	;# 
   138  0086                     	;# 
   139  0087                     	;# 
   140  008C                     	;# 
   141  008D                     	;# 
   142  008E                     	;# 
   143  0092                     	;# 
   144  0098                     	;# 
   145  0099                     	;# 
   146  009E                     	;# 
   147  009F                     	;# 
   148  010C                     	;# 
   149  010D                     	;# 
   150  010E                     	;# 
   151  010F                     	;# 
   152  018C                     	;# 
   153  018D                     	;# 
   154  0000                     	;# 
   155  0001                     	;# 
   156  0002                     	;# 
   157  0003                     	;# 
   158  0004                     	;# 
   159  0005                     	;# 
   160  0006                     	;# 
   161  0007                     	;# 
   162  000A                     	;# 
   163  000B                     	;# 
   164  000C                     	;# 
   165  000D                     	;# 
   166  000E                     	;# 
   167  000E                     	;# 
   168  000F                     	;# 
   169  0010                     	;# 
   170  0011                     	;# 
   171  0012                     	;# 
   172  0015                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0017                     	;# 
   176  0018                     	;# 
   177  0019                     	;# 
   178  001A                     	;# 
   179  001E                     	;# 
   180  001F                     	;# 
   181  0081                     	;# 
   182  0085                     	;# 
   183  0086                     	;# 
   184  0087                     	;# 
   185  008C                     	;# 
   186  008D                     	;# 
   187  008E                     	;# 
   188  0092                     	;# 
   189  0098                     	;# 
   190  0099                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  010C                     	;# 
   194  010D                     	;# 
   195  010E                     	;# 
   196  010F                     	;# 
   197  018C                     	;# 
   198  018D                     	;# 
   199  0000                     	;# 
   200  0001                     	;# 
   201  0002                     	;# 
   202  0003                     	;# 
   203  0004                     	;# 
   204  0005                     	;# 
   205  0006                     	;# 
   206  0007                     	;# 
   207  000A                     	;# 
   208  000B                     	;# 
   209  000C                     	;# 
   210  000D                     	;# 
   211  000E                     	;# 
   212  000E                     	;# 
   213  000F                     	;# 
   214  0010                     	;# 
   215  0011                     	;# 
   216  0012                     	;# 
   217  0015                     	;# 
   218  0015                     	;# 
   219  0016                     	;# 
   220  0017                     	;# 
   221  0018                     	;# 
   222  0019                     	;# 
   223  001A                     	;# 
   224  001E                     	;# 
   225  001F                     	;# 
   226  0081                     	;# 
   227  0085                     	;# 
   228  0086                     	;# 
   229  0087                     	;# 
   230  008C                     	;# 
   231  008D                     	;# 
   232  008E                     	;# 
   233  0092                     	;# 
   234  0098                     	;# 
   235  0099                     	;# 
   236  009E                     	;# 
   237  009F                     	;# 
   238  010C                     	;# 
   239  010D                     	;# 
   240  010E                     	;# 
   241  010F                     	;# 
   242  018C                     	;# 
   243  018D                     	;# 
   244                           
   245                           	psect	idataBANK0
   246  03F1                     __pidataBANK0:	
   247                           
   248                           ;initializer for _matriz
   249  03F1  3431               	retlw	49
   250  03F2  3432               	retlw	50
   251  03F3  3433               	retlw	51
   252  03F4  3434               	retlw	52
   253  03F5  3435               	retlw	53
   254  03F6  3436               	retlw	54
   255  03F7  3437               	retlw	55
   256  03F8  3438               	retlw	56
   257  03F9  3439               	retlw	57
   258  03FA  342B               	retlw	43
   259  03FB  3430               	retlw	48
   260  03FC  343D               	retlw	61
   261                           
   262                           	psect	strings
   263  0001                     __pstrings:	
   264  0001                     stringtab:	
   265  0001                     __stringtab:	
   266                           
   267                           ;	String table - string pointers are 1 byte each
   268  0001  1BFF               	btfsc	btemp+1,7
   269  0002  280B               	ljmp	stringcode
   270  0003  1383               	bcf	3,7
   271  0004  187F               	btfsc	btemp+1,0
   272  0005  1783               	bsf	3,7
   273  0006  0800               	movf	0,w
   274  0007  0A84               	incf	4,f
   275  0008  1903               	skipnz
   276  0009  0AFF               	incf	btemp+1,f
   277  000A  0008               	return
   278  000B                     stringcode:	
   279  000B                     stringdir:	
   280  000B  3000               	movlw	high stringdir
   281  000C  008A               	movwf	10
   282  000D  0804               	movf	4,w
   283  000E  0A84               	incf	4,f
   284  000F  0782               	addwf	2,f
   285  0010                     __stringbase:	
   286  0010  3400               	retlw	0
   287  0011                     __end_of__stringtab:	
   288  0011                     _dpowers:	
   289  0011  3401               	retlw	1
   290  0012  3400               	retlw	0
   291  0013  340A               	retlw	10
   292  0014  3400               	retlw	0
   293  0015  3464               	retlw	100
   294  0016  3400               	retlw	0
   295  0017  34E8               	retlw	232
   296  0018  3403               	retlw	3
   297  0019  3410               	retlw	16
   298  001A  3427               	retlw	39
   299  001B                     __end_of_dpowers:	
   300  0007                     _PORTCbits	set	7
   301  0006                     _PORTB	set	6
   302  0005                     _PORTAbits	set	5
   303  0087                     _TRISC	set	135
   304  0087                     _TRISCbits	set	135
   305  0085                     _TRISAbits	set	133
   306  0086                     _TRISB	set	134
   307  001B                     STR_1:	
   308  001B  3443               	retlw	67	;'C'
   309  001C  3461               	retlw	97	;'a'
   310  001D  346C               	retlw	108	;'l'
   311  001E  3463               	retlw	99	;'c'
   312  001F  3475               	retlw	117	;'u'
   313  0020  346C               	retlw	108	;'l'
   314  0021  3461               	retlw	97	;'a'
   315  0022  3464               	retlw	100	;'d'
   316  0023  346F               	retlw	111	;'o'
   317  0024  3472               	retlw	114	;'r'
   318  0025  3461               	retlw	97	;'a'
   319  0026  3420               	retlw	32	;' '
   320  0027  3450               	retlw	80	;'P'
   321  0028  3445               	retlw	69	;'E'
   322  0029  3454               	retlw	84	;'T'
   323  002A  3400               	retlw	0
   324  002B                     STR_2:	
   325  002B  3425               	retlw	37	;'%'
   326  002C  3464               	retlw	100	;'d'
   327  002D  3400               	retlw	0
   328                           
   329                           ; #config settings
   330  0000                     
   331                           	psect	cinit
   332  07E6                     start_initialization:	
   333  07E6                     __initialization:	
   334                           
   335                           ; Initialize objects allocated to BANK0
   336  07E6  23F1               	fcall	__pidataBANK0	;fetch initializer
   337  07E7  00BE               	movwf	__pdataBANK0& (0+127)
   338  07E8  23F2               	fcall	__pidataBANK0+1	;fetch initializer
   339  07E9  00BF               	movwf	(__pdataBANK0+1)& (0+127)
   340  07EA  23F3               	fcall	__pidataBANK0+2	;fetch initializer
   341  07EB  00C0               	movwf	(__pdataBANK0+2)& (0+127)
   342  07EC  23F4               	fcall	__pidataBANK0+3	;fetch initializer
   343  07ED  00C1               	movwf	(__pdataBANK0+3)& (0+127)
   344  07EE  23F5               	fcall	__pidataBANK0+4	;fetch initializer
   345  07EF  00C2               	movwf	(__pdataBANK0+4)& (0+127)
   346  07F0  23F6               	fcall	__pidataBANK0+5	;fetch initializer
   347  07F1  00C3               	movwf	(__pdataBANK0+5)& (0+127)
   348  07F2  23F7               	fcall	__pidataBANK0+6	;fetch initializer
   349  07F3  00C4               	movwf	(__pdataBANK0+6)& (0+127)
   350  07F4  23F8               	fcall	__pidataBANK0+7	;fetch initializer
   351  07F5  00C5               	movwf	(__pdataBANK0+7)& (0+127)
   352  07F6  23F9               	fcall	__pidataBANK0+8	;fetch initializer
   353  07F7  00C6               	movwf	(__pdataBANK0+8)& (0+127)
   354  07F8  23FA               	fcall	__pidataBANK0+9	;fetch initializer
   355  07F9  00C7               	movwf	(__pdataBANK0+9)& (0+127)
   356  07FA  23FB               	fcall	__pidataBANK0+10	;fetch initializer
   357  07FB  00C8               	movwf	(__pdataBANK0+10)& (0+127)
   358  07FC  23FC               	fcall	__pidataBANK0+11	;fetch initializer
   359  07FD  00C9               	movwf	(__pdataBANK0+11)& (0+127)
   360  07FE                     end_of_initialization:	
   361                           ;End of C runtime variable initialization code
   362                           
   363  07FE                     __end_of__initialization:	
   364  07FE  0183               	clrf	3
   365  07FF  2C3C               	ljmp	_main	;jump to C main() function
   366                           
   367                           	psect	dataBANK0
   368  003E                     __pdataBANK0:	
   369  003E                     _matriz:	
   370  003E                     	ds	12
   371                           
   372                           	psect	cstackCOMMON
   373  0070                     __pcstackCOMMON:	
   374  0070                     ?_init_LCD:	
   375  0070                     ?_sum:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ?_main:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0070                     ?_enable:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0070                     ??_enable:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0070                     ?_send_cmd:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ?_send_msg:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0070                     ?_PORTC_write:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0070                     ?_teclado_matricial_read:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0070                     ?___bmul:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0070                     ?_PORTC_read:	
   403                           ; 1 bytes @ 0x0
   404                           
   405  0070                     ?___wmul:	
   406                           ; 2 bytes @ 0x0
   407                           
   408  0070                     ?___lwdiv:	
   409                           ; 2 bytes @ 0x0
   410                           
   411  0070                     ___bmul@multiplicand:	
   412                           ; 2 bytes @ 0x0
   413                           
   414  0070                     PORTC_read@i:	
   415                           ; 1 bytes @ 0x0
   416                           
   417  0070                     PORTC_write@i:	
   418                           ; 2 bytes @ 0x0
   419                           
   420  0070                     ___wmul@multiplier:	
   421                           ; 2 bytes @ 0x0
   422                           
   423  0070                     ___lwdiv@divisor:	
   424                           ; 2 bytes @ 0x0
   425                           
   426                           
   427                           ; 2 bytes @ 0x0
   428  0070                     	ds	1
   429  0071                     ??___bmul:	
   430                           
   431                           ; 1 bytes @ 0x1
   432  0071                     	ds	1
   433  0072                     ??_send_cmd:	
   434  0072                     ??_send_msg:	
   435                           ; 1 bytes @ 0x2
   436                           
   437  0072                     ??_PORTC_read:	
   438                           ; 1 bytes @ 0x2
   439                           
   440  0072                     ___bmul@product:	
   441                           ; 1 bytes @ 0x2
   442                           
   443  0072                     PORTC_write@v:	
   444                           ; 1 bytes @ 0x2
   445                           
   446  0072                     ___wmul@multiplicand:	
   447                           ; 2 bytes @ 0x2
   448                           
   449  0072                     ___lwdiv@dividend:	
   450                           ; 2 bytes @ 0x2
   451                           
   452                           
   453                           ; 2 bytes @ 0x2
   454  0072                     	ds	1
   455  0073                     ___bmul@multiplier:	
   456                           
   457                           ; 1 bytes @ 0x3
   458  0073                     	ds	1
   459  0074                     ??_PORTC_write:	
   460  0074                     ??___wmul:	
   461                           ; 1 bytes @ 0x4
   462                           
   463  0074                     ??___lwdiv:	
   464                           ; 1 bytes @ 0x4
   465                           
   466  0074                     send_cmd@cmd:	
   467                           ; 1 bytes @ 0x4
   468                           
   469  0074                     send_msg@msg:	
   470                           ; 1 bytes @ 0x4
   471                           
   472  0074                     ___wmul@product:	
   473                           ; 1 bytes @ 0x4
   474                           
   475                           
   476                           ; 2 bytes @ 0x4
   477  0074                     	ds	1
   478  0075                     ??_init_LCD:	
   479  0075                     ?_set_cursor:	
   480                           ; 1 bytes @ 0x5
   481                           
   482  0075                     ?_write_LCD:	
   483                           ; 1 bytes @ 0x5
   484                           
   485  0075                     ??_teclado_matricial_read:	
   486                           ; 1 bytes @ 0x5
   487                           
   488  0075                     write_LCD@c:	
   489                           ; 1 bytes @ 0x5
   490                           
   491  0075                     set_cursor@line:	
   492                           ; 2 bytes @ 0x5
   493                           
   494  0075                     ___lwdiv@quotient:	
   495                           ; 2 bytes @ 0x5
   496                           
   497                           
   498                           ; 2 bytes @ 0x5
   499  0075                     	ds	2
   500  0077                     ??_write_LCD:	
   501  0077                     ___lwdiv@counter:	
   502                           ; 1 bytes @ 0x7
   503                           
   504  0077                     set_cursor@pos:	
   505                           ; 1 bytes @ 0x7
   506                           
   507                           
   508                           ; 2 bytes @ 0x7
   509  0077                     	ds	1
   510  0078                     ?___lwmod:	
   511  0078                     teclado_matricial_read@j:	
   512                           ; 2 bytes @ 0x8
   513                           
   514  0078                     ___lwmod@divisor:	
   515                           ; 2 bytes @ 0x8
   516                           
   517                           
   518                           ; 2 bytes @ 0x8
   519  0078                     	ds	1
   520  0079                     ??_set_cursor:	
   521                           
   522                           ; 1 bytes @ 0x9
   523  0079                     	ds	1
   524  007A                     set_cursor@cursor:	
   525  007A                     write_LCD@i:	
   526                           ; 1 bytes @ 0xA
   527                           
   528  007A                     teclado_matricial_read@i:	
   529                           ; 2 bytes @ 0xA
   530                           
   531  007A                     ___lwmod@dividend:	
   532                           ; 2 bytes @ 0xA
   533                           
   534                           
   535                           ; 2 bytes @ 0xA
   536  007A                     	ds	2
   537  007C                     ??___lwmod:	
   538                           
   539                           ; 1 bytes @ 0xC
   540  007C                     	ds	1
   541  007D                     ___lwmod@counter:	
   542                           
   543                           ; 1 bytes @ 0xD
   544  007D                     	ds	1
   545  007E                     ??_main:	
   546                           
   547                           	psect	cstackBANK0
   548  0020                     __pcstackBANK0:	
   549                           ; 1 bytes @ 0xE
   550                           
   551  0020                     ?_sprintf:	
   552  0020                     sprintf@f:	
   553                           ; 2 bytes @ 0x0
   554                           
   555                           
   556                           ; 1 bytes @ 0x0
   557  0020                     	ds	3
   558  0023                     ??_sprintf:	
   559                           
   560                           ; 1 bytes @ 0x3
   561  0023                     	ds	3
   562  0026                     sprintf@ap:	
   563                           
   564                           ; 1 bytes @ 0x6
   565  0026                     	ds	1
   566  0027                     sprintf@flag:	
   567                           
   568                           ; 1 bytes @ 0x7
   569  0027                     	ds	1
   570  0028                     sprintf@prec:	
   571                           
   572                           ; 1 bytes @ 0x8
   573  0028                     	ds	1
   574  0029                     sprintf@val:	
   575                           
   576                           ; 2 bytes @ 0x9
   577  0029                     	ds	2
   578  002B                     sprintf@sp:	
   579                           
   580                           ; 1 bytes @ 0xB
   581  002B                     	ds	1
   582  002C                     sprintf@c:	
   583                           
   584                           ; 1 bytes @ 0xC
   585  002C                     	ds	1
   586  002D                     ??_sum:	
   587                           
   588                           ; 1 bytes @ 0xD
   589  002D                     	ds	2
   590  002F                     sum@result:	
   591                           
   592                           ; 8 bytes @ 0xF
   593  002F                     	ds	8
   594  0037                     sum@n1:	
   595                           
   596                           ; 2 bytes @ 0x17
   597  0037                     	ds	2
   598  0039                     sum@n2:	
   599                           
   600                           ; 2 bytes @ 0x19
   601  0039                     	ds	2
   602  003B                     sum@op:	
   603                           
   604                           ; 2 bytes @ 0x1B
   605  003B                     	ds	2
   606  003D                     sum@c:	
   607                           
   608                           ; 1 bytes @ 0x1D
   609  003D                     	ds	1
   610                           
   611                           	psect	maintext
   612  043C                     __pmaintext:	
   613 ;;
   614 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   615 ;;
   616 ;; *************** function _main *****************
   617 ;; Defined at:
   618 ;;		line 12 in file "main.c"
   619 ;; Parameters:    Size  Location     Type
   620 ;;		None
   621 ;; Auto vars:     Size  Location     Type
   622 ;;		None
   623 ;; Return value:  Size  Location     Type
   624 ;;                  1    wreg      void 
   625 ;; Registers used:
   626 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   627 ;; Tracked objects:
   628 ;;		On entry : B00/0
   629 ;;		On exit  : 0/0
   630 ;;		Unchanged: 0/0
   631 ;; Data sizes:     COMMON   BANK0   BANK1
   632 ;;      Params:         0       0       0
   633 ;;      Locals:         0       0       0
   634 ;;      Temps:          0       0       0
   635 ;;      Totals:         0       0       0
   636 ;;Total ram usage:        0 bytes
   637 ;; Hardware stack levels required when called:    4
   638 ;; This function calls:
   639 ;;		_init_LCD
   640 ;;		_set_cursor
   641 ;;		_sum
   642 ;;		_write_LCD
   643 ;; This function is called by:
   644 ;;		Startup code after reset
   645 ;; This function uses a non-reentrant model
   646 ;;
   647                           
   648                           
   649                           ;psect for function _main
   650  043C                     _main:	
   651                           
   652                           ;main.c: 14: init_LCD();
   653                           
   654                           ;incstack = 0
   655                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   656  043C  23FD               	fcall	_init_LCD
   657                           
   658                           ;main.c: 15: set_cursor(0,0);
   659  043D  3000               	movlw	0
   660  043E  00F5               	movwf	set_cursor@line
   661  043F  00F6               	movwf	set_cursor@line+1
   662  0440  3000               	movlw	0
   663  0441  00F7               	movwf	set_cursor@pos
   664  0442  00F8               	movwf	set_cursor@pos+1
   665  0443  240B               	fcall	_set_cursor
   666                           
   667                           ;main.c: 16: write_LCD("Calculadora PET");
   668  0444  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   669  0445  00F5               	movwf	write_LCD@c
   670  0446  3080               	movlw	128
   671  0447  00F6               	movwf	write_LCD@c+1
   672  0448  24B6               	fcall	_write_LCD
   673                           
   674                           ;main.c: 17: set_cursor(1,0);
   675  0449  3001               	movlw	1
   676  044A  00F5               	movwf	set_cursor@line
   677  044B  3000               	movlw	0
   678  044C  00F6               	movwf	set_cursor@line+1
   679  044D  3000               	movlw	0
   680  044E  00F7               	movwf	set_cursor@pos
   681  044F  00F8               	movwf	set_cursor@pos+1
   682  0450  240B               	fcall	_set_cursor
   683                           
   684                           ;main.c: 18: sum();
   685  0451  26AC               	fcall	_sum
   686  0452                     l13:	
   687                           ;main.c: 19: while(1);
   688                           
   689  0452  2C52               	goto	l13
   690  0453                     __end_of_main:	
   691                           
   692                           	psect	text1
   693  06AC                     __ptext1:	
   694 ;; *************** function _sum *****************
   695 ;; Defined at:
   696 ;;		line 14 in file "calc.c"
   697 ;; Parameters:    Size  Location     Type
   698 ;;		None
   699 ;; Auto vars:     Size  Location     Type
   700 ;;  c               1   29[BANK0 ] unsigned char 
   701 ;;  result          8   15[BANK0 ] unsigned char [8]
   702 ;;  op              2   27[BANK0 ] int 
   703 ;;  n2              2   25[BANK0 ] int 
   704 ;;  n1              2   23[BANK0 ] int 
   705 ;; Return value:  Size  Location     Type
   706 ;;                  1    wreg      void 
   707 ;; Registers used:
   708 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   709 ;; Tracked objects:
   710 ;;		On entry : 0/0
   711 ;;		On exit  : 0/0
   712 ;;		Unchanged: 0/0
   713 ;; Data sizes:     COMMON   BANK0   BANK1
   714 ;;      Params:         0       0       0
   715 ;;      Locals:         0      15       0
   716 ;;      Temps:          0       2       0
   717 ;;      Totals:         0      17       0
   718 ;;Total ram usage:       17 bytes
   719 ;; Hardware stack levels used:    1
   720 ;; Hardware stack levels required when called:    3
   721 ;; This function calls:
   722 ;;		___wmul
   723 ;;		_send_msg
   724 ;;		_sprintf
   725 ;;		_teclado_matricial_read
   726 ;;		_write_LCD
   727 ;; This function is called by:
   728 ;;		_main
   729 ;; This function uses a non-reentrant model
   730 ;;
   731                           
   732                           
   733                           ;psect for function _sum
   734  06AC                     _sum:	
   735                           
   736                           ;calc.c: 16: int n1 = 0, n2 = 0;
   737                           
   738                           ;incstack = 0
   739                           ; Regs used in _sum: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   740  06AC  1283               	bcf	3,5	;RP0=0, select bank0
   741  06AD  1303               	bcf	3,6	;RP1=0, select bank0
   742  06AE  01B7               	clrf	sum@n1
   743  06AF  01B8               	clrf	sum@n1+1
   744  06B0  01B9               	clrf	sum@n2
   745  06B1  01BA               	clrf	sum@n2+1
   746                           
   747                           ;calc.c: 17: char result[8];
   748                           ;calc.c: 18: int op = 0;
   749  06B2  01BB               	clrf	sum@op
   750  06B3  01BC               	clrf	sum@op+1
   751  06B4                     l1360:	
   752                           ;calc.c: 19: while(1){
   753                           
   754                           
   755                           ;calc.c: 20: char c = teclado_matricial_read();
   756  06B4  2626               	fcall	_teclado_matricial_read
   757  06B5  1283               	bcf	3,5	;RP0=0, select bank0
   758  06B6  1303               	bcf	3,6	;RP1=0, select bank0
   759  06B7  00AD               	movwf	??_sum
   760  06B8  082D               	movf	??_sum,w
   761  06B9  00BD               	movwf	sum@c
   762                           
   763                           ;calc.c: 21: if(c != ' '){
   764  06BA  3020               	movlw	32
   765  06BB  063D               	xorwf	sum@c,w
   766  06BC  1903               	btfsc	3,2
   767  06BD  2EB4               	goto	l1360
   768                           
   769                           ;calc.c: 22: if((c != '+') && (c != '=')){
   770  06BE  302B               	movlw	43
   771  06BF  063D               	xorwf	sum@c,w
   772  06C0  1903               	btfsc	3,2
   773  06C1  2F02               	goto	l1374
   774  06C2  303D               	movlw	61
   775  06C3  063D               	xorwf	sum@c,w
   776  06C4  1903               	btfsc	3,2
   777  06C5  2F02               	goto	l1374
   778                           
   779                           ;calc.c: 23: if((op == 0)){
   780  06C6  083B               	movf	sum@op,w
   781  06C7  043C               	iorwf	sum@op+1,w
   782  06C8  1D03               	btfss	3,2
   783  06C9  2EE5               	goto	l1372
   784                           
   785                           ;calc.c: 24: n1 = n1 * 10 + (c - '0');
   786  06CA  0838               	movf	sum@n1+1,w
   787  06CB  00F1               	movwf	___wmul@multiplier+1
   788  06CC  0837               	movf	sum@n1,w
   789  06CD  00F0               	movwf	___wmul@multiplier
   790  06CE  300A               	movlw	10
   791  06CF  00F2               	movwf	___wmul@multiplicand
   792  06D0  3000               	movlw	0
   793  06D1  00F3               	movwf	___wmul@multiplicand+1
   794  06D2  2470               	fcall	___wmul
   795  06D3  1283               	bcf	3,5	;RP0=0, select bank0
   796  06D4  1303               	bcf	3,6	;RP1=0, select bank0
   797  06D5  083D               	movf	sum@c,w
   798  06D6  0770               	addwf	?___wmul,w
   799  06D7  00AD               	movwf	??_sum
   800  06D8  0871               	movf	?___wmul+1,w
   801  06D9  1803               	skipnc
   802  06DA  0A71               	incf	?___wmul+1,w
   803  06DB  00AE               	movwf	??_sum+1
   804  06DC  082D               	movf	??_sum,w
   805  06DD  3ED0               	addlw	208
   806  06DE  00B7               	movwf	sum@n1
   807  06DF  082E               	movf	??_sum+1,w
   808  06E0  1803               	skipnc
   809  06E1  3E01               	addlw	1
   810  06E2  3EFF               	addlw	255
   811  06E3  00B8               	movwf	sum@n1+1
   812                           
   813                           ;calc.c: 25: }
   814  06E4  2EFF               	goto	l116
   815  06E5                     l1372:	
   816                           
   817                           ;calc.c: 26: else{
   818                           ;calc.c: 27: n2 = n2 * 10 + (c - '0');
   819  06E5  083A               	movf	sum@n2+1,w
   820  06E6  00F1               	movwf	___wmul@multiplier+1
   821  06E7  0839               	movf	sum@n2,w
   822  06E8  00F0               	movwf	___wmul@multiplier
   823  06E9  300A               	movlw	10
   824  06EA  00F2               	movwf	___wmul@multiplicand
   825  06EB  3000               	movlw	0
   826  06EC  00F3               	movwf	___wmul@multiplicand+1
   827  06ED  2470               	fcall	___wmul
   828  06EE  1283               	bcf	3,5	;RP0=0, select bank0
   829  06EF  1303               	bcf	3,6	;RP1=0, select bank0
   830  06F0  083D               	movf	sum@c,w
   831  06F1  0770               	addwf	?___wmul,w
   832  06F2  00AD               	movwf	??_sum
   833  06F3  0871               	movf	?___wmul+1,w
   834  06F4  1803               	skipnc
   835  06F5  0A71               	incf	?___wmul+1,w
   836  06F6  00AE               	movwf	??_sum+1
   837  06F7  082D               	movf	??_sum,w
   838  06F8  3ED0               	addlw	208
   839  06F9  00B9               	movwf	sum@n2
   840  06FA  082E               	movf	??_sum+1,w
   841  06FB  1803               	skipnc
   842  06FC  3E01               	addlw	1
   843  06FD  3EFF               	addlw	255
   844  06FE  00BA               	movwf	sum@n2+1
   845  06FF                     l116:	
   846                           
   847                           ;calc.c: 28: }
   848                           ;calc.c: 29: send_msg(c);
   849  06FF  083D               	movf	sum@c,w
   850  0700  2453               	fcall	_send_msg
   851                           
   852                           ;calc.c: 30: }
   853  0701  2F14               	goto	l1382
   854  0702                     l1374:	
   855                           
   856                           ;calc.c: 31: else if((c == '+') && (op == 0)){
   857  0702  302B               	movlw	43
   858  0703  1283               	bcf	3,5	;RP0=0, select bank0
   859  0704  1303               	bcf	3,6	;RP1=0, select bank0
   860  0705  063D               	xorwf	sum@c,w
   861  0706  1D03               	btfss	3,2
   862  0707  2F14               	goto	l1382
   863  0708  083B               	movf	sum@op,w
   864  0709  043C               	iorwf	sum@op+1,w
   865  070A  1D03               	btfss	3,2
   866  070B  2F14               	goto	l1382
   867                           
   868                           ;calc.c: 32: send_msg(c);
   869  070C  083D               	movf	sum@c,w
   870  070D  2453               	fcall	_send_msg
   871                           
   872                           ;calc.c: 33: op = 1;
   873  070E  3001               	movlw	1
   874  070F  1283               	bcf	3,5	;RP0=0, select bank0
   875  0710  1303               	bcf	3,6	;RP1=0, select bank0
   876  0711  00BB               	movwf	sum@op
   877  0712  3000               	movlw	0
   878  0713  00BC               	movwf	sum@op+1
   879  0714                     l1382:	
   880                           
   881                           ;calc.c: 34: }
   882                           ;calc.c: 35: if(c == '='){
   883  0714  303D               	movlw	61
   884  0715  1283               	bcf	3,5	;RP0=0, select bank0
   885  0716  1303               	bcf	3,6	;RP1=0, select bank0
   886  0717  063D               	xorwf	sum@c,w
   887  0718  1D03               	btfss	3,2
   888  0719  2EB4               	goto	l1360
   889                           
   890                           ;calc.c: 36: send_msg(c);
   891  071A  083D               	movf	sum@c,w
   892  071B  2453               	fcall	_send_msg
   893                           
   894                           ;calc.c: 37: sprintf(result, "%d", n1 + n2);
   895  071C  301B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   896  071D  1283               	bcf	3,5	;RP0=0, select bank0
   897  071E  1303               	bcf	3,6	;RP1=0, select bank0
   898  071F  00AD               	movwf	??_sum
   899  0720  082D               	movf	??_sum,w
   900  0721  00A0               	movwf	sprintf@f
   901  0722  0839               	movf	sum@n2,w
   902  0723  0737               	addwf	sum@n1,w
   903  0724  00A1               	movwf	?_sprintf+1
   904  0725  083A               	movf	sum@n2+1,w
   905  0726  1803               	skipnc
   906  0727  0A3A               	incf	sum@n2+1,w
   907  0728  0738               	addwf	sum@n1+1,w
   908  0729  00A2               	movwf	?_sprintf+2
   909  072A  302F               	movlw	(low (sum@result| 0))& (0+255)
   910  072B  2732               	fcall	_sprintf
   911                           
   912                           ;calc.c: 38: write_LCD(result);
   913  072C  302F               	movlw	(low (sum@result| 0))& (0+255)
   914  072D  00F5               	movwf	write_LCD@c
   915  072E  3000               	movlw	0
   916  072F  00F6               	movwf	write_LCD@c+1
   917  0730  24B6               	fcall	_write_LCD
   918                           
   919                           ;calc.c: 39: return;
   920  0731  0008               	return
   921  0732                     __end_of_sum:	
   922                           
   923                           	psect	text2
   924  04B6                     __ptext2:	
   925 ;; *************** function _write_LCD *****************
   926 ;; Defined at:
   927 ;;		line 56 in file "lcd.c"
   928 ;; Parameters:    Size  Location     Type
   929 ;;  c               2    5[COMMON] PTR unsigned char 
   930 ;;		 -> sum@result(8), STR_1(16), 
   931 ;; Auto vars:     Size  Location     Type
   932 ;;  i               2   10[COMMON] int 
   933 ;; Return value:  Size  Location     Type
   934 ;;                  1    wreg      void 
   935 ;; Registers used:
   936 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   937 ;; Tracked objects:
   938 ;;		On entry : 0/0
   939 ;;		On exit  : 0/0
   940 ;;		Unchanged: 0/0
   941 ;; Data sizes:     COMMON   BANK0   BANK1
   942 ;;      Params:         2       0       0
   943 ;;      Locals:         2       0       0
   944 ;;      Temps:          3       0       0
   945 ;;      Totals:         7       0       0
   946 ;;Total ram usage:        7 bytes
   947 ;; Hardware stack levels used:    1
   948 ;; Hardware stack levels required when called:    2
   949 ;; This function calls:
   950 ;;		_send_msg
   951 ;; This function is called by:
   952 ;;		_main
   953 ;;		_sum
   954 ;; This function uses a non-reentrant model
   955 ;;
   956                           
   957                           
   958                           ;psect for function _write_LCD
   959  04B6                     _write_LCD:	
   960                           
   961                           ;lcd.c: 58: int i = 0;
   962                           
   963                           ;incstack = 0
   964                           ; Regs used in _write_LCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   965  04B6  01FA               	clrf	write_LCD@i
   966  04B7  01FB               	clrf	write_LCD@i+1
   967  04B8                     l1214:	
   968                           ;lcd.c: 59: for(; c[i] != '\0'; i++)
   969                           
   970  04B8  087A               	movf	write_LCD@i,w
   971  04B9  0775               	addwf	write_LCD@c,w
   972  04BA  00F8               	movwf	??_write_LCD+1
   973  04BB  0876               	movf	write_LCD@c+1,w
   974  04BC  00F7               	movwf	??_write_LCD
   975  04BD  1803               	skipnc
   976  04BE  0AF7               	incf	??_write_LCD,f
   977  04BF  1BFA               	btfsc	write_LCD@i,7
   978  04C0  03F7               	decf	??_write_LCD,f
   979  04C1  0877               	movf	??_write_LCD,w
   980  04C2  00F9               	movwf	??_write_LCD+2
   981  04C3  0879               	movf	??_write_LCD+2,w
   982  04C4  1283               	bcf	3,5	;RP0=0, select bank0
   983  04C5  1303               	bcf	3,6	;RP1=0, select bank0
   984  04C6  00FF               	movwf	127
   985  04C7  0878               	movf	??_write_LCD+1,w
   986  04C8  0084               	movwf	4
   987  04C9  2001               	fcall	stringtab
   988  04CA  3A00               	xorlw	0
   989  04CB  1903               	btfsc	3,2
   990  04CC  0008               	return
   991                           
   992                           ;lcd.c: 60: send_msg(c[i]);
   993  04CD  087A               	movf	write_LCD@i,w
   994  04CE  0775               	addwf	write_LCD@c,w
   995  04CF  00F8               	movwf	??_write_LCD+1
   996  04D0  0876               	movf	write_LCD@c+1,w
   997  04D1  00F7               	movwf	??_write_LCD
   998  04D2  1803               	skipnc
   999  04D3  0AF7               	incf	??_write_LCD,f
  1000  04D4  1BFA               	btfsc	write_LCD@i,7
  1001  04D5  03F7               	decf	??_write_LCD,f
  1002  04D6  0877               	movf	??_write_LCD,w
  1003  04D7  00F9               	movwf	??_write_LCD+2
  1004  04D8  0879               	movf	??_write_LCD+2,w
  1005  04D9  1283               	bcf	3,5	;RP0=0, select bank0
  1006  04DA  1303               	bcf	3,6	;RP1=0, select bank0
  1007  04DB  00FF               	movwf	127
  1008  04DC  0878               	movf	??_write_LCD+1,w
  1009  04DD  0084               	movwf	4
  1010  04DE  2001               	fcall	stringtab
  1011  04DF  2453               	fcall	_send_msg
  1012  04E0  3001               	movlw	1
  1013  04E1  07FA               	addwf	write_LCD@i,f
  1014  04E2  1803               	skipnc
  1015  04E3  0AFB               	incf	write_LCD@i+1,f
  1016  04E4  3000               	movlw	0
  1017  04E5  07FB               	addwf	write_LCD@i+1,f
  1018  04E6  2CB8               	goto	l1214
  1019  04E7                     __end_of_write_LCD:	
  1020                           
  1021                           	psect	text3
  1022  0453                     __ptext3:	
  1023 ;; *************** function _send_msg *****************
  1024 ;; Defined at:
  1025 ;;		line 32 in file "lcd.c"
  1026 ;; Parameters:    Size  Location     Type
  1027 ;;  msg             1    wreg     unsigned char 
  1028 ;; Auto vars:     Size  Location     Type
  1029 ;;  msg             1    4[COMMON] unsigned char 
  1030 ;; Return value:  Size  Location     Type
  1031 ;;                  1    wreg      void 
  1032 ;; Registers used:
  1033 ;;		wreg, status,2, status,0, pclath, cstack
  1034 ;; Tracked objects:
  1035 ;;		On entry : 0/0
  1036 ;;		On exit  : 0/0
  1037 ;;		Unchanged: 0/0
  1038 ;; Data sizes:     COMMON   BANK0   BANK1
  1039 ;;      Params:         0       0       0
  1040 ;;      Locals:         1       0       0
  1041 ;;      Temps:          2       0       0
  1042 ;;      Totals:         3       0       0
  1043 ;;Total ram usage:        3 bytes
  1044 ;; Hardware stack levels used:    1
  1045 ;; Hardware stack levels required when called:    1
  1046 ;; This function calls:
  1047 ;;		_enable
  1048 ;; This function is called by:
  1049 ;;		_write_LCD
  1050 ;;		_sum
  1051 ;; This function uses a non-reentrant model
  1052 ;;
  1053                           
  1054                           
  1055                           ;psect for function _send_msg
  1056  0453                     _send_msg:	
  1057                           
  1058                           ;incstack = 0
  1059                           ; Regs used in _send_msg: [wreg+status,2+status,0+pclath+cstack]
  1060                           ;send_msg@msg stored from wreg
  1061  0453  00F4               	movwf	send_msg@msg
  1062                           
  1063                           ;lcd.c: 34: PORTB = msg;
  1064  0454  0874               	movf	send_msg@msg,w
  1065  0455  1283               	bcf	3,5	;RP0=0, select bank0
  1066  0456  1303               	bcf	3,6	;RP1=0, select bank0
  1067  0457  0086               	movwf	6	;volatile
  1068                           
  1069                           ;lcd.c: 35: PORTCbits.RC7 = 1;
  1070  0458  1787               	bsf	7,7	;volatile
  1071                           
  1072                           ;lcd.c: 36: _delay((unsigned long)((1)*(16000000/4000.0)));
  1073  0459  3006               	movlw	6
  1074  045A  00F3               	movwf	??_send_msg+1
  1075  045B  3030               	movlw	48
  1076  045C  00F2               	movwf	??_send_msg
  1077  045D                     u917:	
  1078  045D  0BF2               	decfsz	??_send_msg,f
  1079  045E  2C5D               	goto	u917
  1080  045F  0BF3               	decfsz	??_send_msg+1,f
  1081  0460  2C5D               	goto	u917
  1082  0461  0000               	nop
  1083                           
  1084                           ;lcd.c: 37: enable();
  1085  0462  2491               	fcall	_enable
  1086                           
  1087                           ;lcd.c: 38: _delay((unsigned long)((1)*(16000000/4000.0)));
  1088  0463  3006               	movlw	6
  1089  0464  00F3               	movwf	??_send_msg+1
  1090  0465  3030               	movlw	48
  1091  0466  00F2               	movwf	??_send_msg
  1092  0467                     u927:	
  1093  0467  0BF2               	decfsz	??_send_msg,f
  1094  0468  2C67               	goto	u927
  1095  0469  0BF3               	decfsz	??_send_msg+1,f
  1096  046A  2C67               	goto	u927
  1097  046B  0000               	nop
  1098                           
  1099                           ;lcd.c: 39: PORTCbits.RC7 = 0;
  1100  046C  1283               	bcf	3,5	;RP0=0, select bank0
  1101  046D  1303               	bcf	3,6	;RP1=0, select bank0
  1102  046E  1387               	bcf	7,7	;volatile
  1103  046F  0008               	return
  1104  0470                     __end_of_send_msg:	
  1105                           
  1106                           	psect	text4
  1107  0626                     __ptext4:	
  1108 ;; *************** function _teclado_matricial_read *****************
  1109 ;; Defined at:
  1110 ;;		line 73 in file "teclado_matricial_4x3.c"
  1111 ;; Parameters:    Size  Location     Type
  1112 ;;		None
  1113 ;; Auto vars:     Size  Location     Type
  1114 ;;  i               2   10[COMMON] int 
  1115 ;;  j               2    8[COMMON] int 
  1116 ;; Return value:  Size  Location     Type
  1117 ;;                  1    wreg      unsigned char 
  1118 ;; Registers used:
  1119 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1120 ;; Tracked objects:
  1121 ;;		On entry : 0/0
  1122 ;;		On exit  : 0/0
  1123 ;;		Unchanged: 0/0
  1124 ;; Data sizes:     COMMON   BANK0   BANK1
  1125 ;;      Params:         0       0       0
  1126 ;;      Locals:         4       0       0
  1127 ;;      Temps:          3       0       0
  1128 ;;      Totals:         7       0       0
  1129 ;;Total ram usage:        7 bytes
  1130 ;; Hardware stack levels used:    1
  1131 ;; Hardware stack levels required when called:    1
  1132 ;; This function calls:
  1133 ;;		_PORTC_read
  1134 ;;		_PORTC_write
  1135 ;;		___bmul
  1136 ;; This function is called by:
  1137 ;;		_sum
  1138 ;; This function uses a non-reentrant model
  1139 ;;
  1140                           
  1141                           
  1142                           ;psect for function _teclado_matricial_read
  1143  0626                     _teclado_matricial_read:	
  1144                           
  1145                           ;teclado_matricial_4x3.c: 75: TRISC = 0x70;
  1146                           
  1147                           ;incstack = 0
  1148                           ; Regs used in _teclado_matricial_read: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cst
      +                          ack]
  1149  0626  3070               	movlw	112
  1150  0627  1683               	bsf	3,5	;RP0=1, select bank1
  1151  0628  1303               	bcf	3,6	;RP1=0, select bank1
  1152  0629  0087               	movwf	7	;volatile
  1153                           
  1154                           ;teclado_matricial_4x3.c: 76: int i, j;
  1155                           ;teclado_matricial_4x3.c: 77: for(i = 0; i < 5; i++){
  1156  062A  01FA               	clrf	teclado_matricial_read@i
  1157  062B  01FB               	clrf	teclado_matricial_read@i+1
  1158  062C  087B               	movf	teclado_matricial_read@i+1,w
  1159  062D  3A80               	xorlw	128
  1160  062E  00FF               	movwf	127
  1161  062F  3080               	movlw	128
  1162  0630  027F               	subwf	127,w
  1163  0631  1D03               	skipz
  1164  0632  2E35               	goto	u655
  1165  0633  3005               	movlw	5
  1166  0634  027A               	subwf	teclado_matricial_read@i,w
  1167  0635                     u655:	
  1168  0635  1803               	btfsc	3,0
  1169  0636  2EAA               	goto	l1260
  1170  0637                     l1232:	
  1171                           
  1172                           ;teclado_matricial_4x3.c: 78: if(i == 0){
  1173  0637  087A               	movf	teclado_matricial_read@i,w
  1174  0638  047B               	iorwf	teclado_matricial_read@i+1,w
  1175  0639  1D03               	btfss	3,2
  1176  063A  2E47               	goto	l1236
  1177                           
  1178                           ;teclado_matricial_4x3.c: 79: _delay((unsigned long)((200)*(16000000/4000.0)));
  1179  063B  3005               	movlw	5
  1180  063C  00F7               	movwf	??_teclado_matricial_read+2
  1181  063D  300F               	movlw	15
  1182  063E  00F6               	movwf	??_teclado_matricial_read+1
  1183  063F  30F1               	movlw	241
  1184  0640  00F5               	movwf	??_teclado_matricial_read
  1185  0641                     u937:	
  1186  0641  0BF5               	decfsz	??_teclado_matricial_read,f
  1187  0642  2E41               	goto	u937
  1188  0643  0BF6               	decfsz	??_teclado_matricial_read+1,f
  1189  0644  2E41               	goto	u937
  1190  0645  0BF7               	decfsz	??_teclado_matricial_read+2,f
  1191  0646  2E41               	goto	u937
  1192  0647                     l1236:	
  1193                           
  1194                           ;teclado_matricial_4x3.c: 80: }
  1195                           ;teclado_matricial_4x3.c: 81: PORTC_write(i, 1);
  1196  0647  087B               	movf	teclado_matricial_read@i+1,w
  1197  0648  00F1               	movwf	PORTC_write@i+1
  1198  0649  087A               	movf	teclado_matricial_read@i,w
  1199  064A  00F0               	movwf	PORTC_write@i
  1200  064B  3001               	movlw	1
  1201  064C  00F2               	movwf	PORTC_write@v
  1202  064D  3000               	movlw	0
  1203  064E  00F3               	movwf	PORTC_write@v+1
  1204  064F  2555               	fcall	_PORTC_write
  1205                           
  1206                           ;teclado_matricial_4x3.c: 82: for(j = 0; j < 3; j++){
  1207  0650  01F8               	clrf	teclado_matricial_read@j
  1208  0651  01F9               	clrf	teclado_matricial_read@j+1
  1209  0652  0879               	movf	teclado_matricial_read@j+1,w
  1210  0653  3A80               	xorlw	128
  1211  0654  00FF               	movwf	127
  1212  0655  3080               	movlw	128
  1213  0656  027F               	subwf	127,w
  1214  0657  1D03               	skipz
  1215  0658  2E5B               	goto	u675
  1216  0659  3003               	movlw	3
  1217  065A  0278               	subwf	teclado_matricial_read@j,w
  1218  065B                     u675:	
  1219  065B  1803               	btfsc	3,0
  1220  065C  2E91               	goto	l1254
  1221  065D                     l1244:	
  1222                           
  1223                           ;teclado_matricial_4x3.c: 83: if(PORTC_read(j+4)){
  1224  065D  0878               	movf	teclado_matricial_read@j,w
  1225  065E  3E04               	addlw	4
  1226  065F  00F0               	movwf	PORTC_read@i
  1227  0660  0879               	movf	teclado_matricial_read@j+1,w
  1228  0661  1803               	skipnc
  1229  0662  3E01               	addlw	1
  1230  0663  3E00               	addlw	0
  1231  0664  00F1               	movwf	PORTC_read@i+1
  1232  0665  25AE               	fcall	_PORTC_read
  1233  0666  0870               	movf	?_PORTC_read,w
  1234  0667  0471               	iorwf	?_PORTC_read+1,w
  1235  0668  1903               	btfsc	3,2
  1236  0669  2E80               	goto	l1250
  1237                           
  1238                           ;teclado_matricial_4x3.c: 84: PORTC_write(i, 0);
  1239  066A  087B               	movf	teclado_matricial_read@i+1,w
  1240  066B  00F1               	movwf	PORTC_write@i+1
  1241  066C  087A               	movf	teclado_matricial_read@i,w
  1242  066D  00F0               	movwf	PORTC_write@i
  1243  066E  3000               	movlw	0
  1244  066F  00F2               	movwf	PORTC_write@v
  1245  0670  00F3               	movwf	PORTC_write@v+1
  1246  0671  2555               	fcall	_PORTC_write
  1247                           
  1248                           ;teclado_matricial_4x3.c: 85: return matriz[i][j];
  1249  0672  3003               	movlw	3
  1250  0673  00F5               	movwf	??_teclado_matricial_read
  1251  0674  0875               	movf	??_teclado_matricial_read,w
  1252  0675  00F0               	movwf	___bmul@multiplicand
  1253  0676  087A               	movf	teclado_matricial_read@i,w
  1254  0677  242B               	fcall	___bmul
  1255  0678  3E3E               	addlw	(low (_matriz| 0))& (0+255)
  1256  0679  0778               	addwf	teclado_matricial_read@j,w
  1257  067A  00F6               	movwf	??_teclado_matricial_read+1
  1258  067B  0876               	movf	??_teclado_matricial_read+1,w
  1259  067C  0084               	movwf	4
  1260  067D  1383               	bcf	3,7	;select IRP bank0
  1261  067E  0800               	movf	0,w
  1262  067F  0008               	return
  1263  0680                     l1250:	
  1264  0680  3001               	movlw	1
  1265  0681  07F8               	addwf	teclado_matricial_read@j,f
  1266  0682  1803               	skipnc
  1267  0683  0AF9               	incf	teclado_matricial_read@j+1,f
  1268  0684  3000               	movlw	0
  1269  0685  07F9               	addwf	teclado_matricial_read@j+1,f
  1270  0686  0879               	movf	teclado_matricial_read@j+1,w
  1271  0687  3A80               	xorlw	128
  1272  0688  00FF               	movwf	127
  1273  0689  3080               	movlw	128
  1274  068A  027F               	subwf	127,w
  1275  068B  1D03               	skipz
  1276  068C  2E8F               	goto	u695
  1277  068D  3003               	movlw	3
  1278  068E  0278               	subwf	teclado_matricial_read@j,w
  1279  068F                     u695:	
  1280  068F  1C03               	skipc
  1281  0690  2E5D               	goto	l1244
  1282  0691                     l1254:	
  1283                           
  1284                           ;teclado_matricial_4x3.c: 86: }
  1285                           ;teclado_matricial_4x3.c: 87: }
  1286                           ;teclado_matricial_4x3.c: 88: PORTC_write(i, 0);
  1287  0691  087B               	movf	teclado_matricial_read@i+1,w
  1288  0692  00F1               	movwf	PORTC_write@i+1
  1289  0693  087A               	movf	teclado_matricial_read@i,w
  1290  0694  00F0               	movwf	PORTC_write@i
  1291  0695  3000               	movlw	0
  1292  0696  00F2               	movwf	PORTC_write@v
  1293  0697  00F3               	movwf	PORTC_write@v+1
  1294  0698  2555               	fcall	_PORTC_write
  1295  0699  3001               	movlw	1
  1296  069A  07FA               	addwf	teclado_matricial_read@i,f
  1297  069B  1803               	skipnc
  1298  069C  0AFB               	incf	teclado_matricial_read@i+1,f
  1299  069D  3000               	movlw	0
  1300  069E  07FB               	addwf	teclado_matricial_read@i+1,f
  1301  069F  087B               	movf	teclado_matricial_read@i+1,w
  1302  06A0  3A80               	xorlw	128
  1303  06A1  00FF               	movwf	127
  1304  06A2  3080               	movlw	128
  1305  06A3  027F               	subwf	127,w
  1306  06A4  1D03               	skipz
  1307  06A5  2EA8               	goto	u705
  1308  06A6  3005               	movlw	5
  1309  06A7  027A               	subwf	teclado_matricial_read@i,w
  1310  06A8                     u705:	
  1311  06A8  1C03               	skipc
  1312  06A9  2E37               	goto	l1232
  1313  06AA                     l1260:	
  1314                           
  1315                           ;teclado_matricial_4x3.c: 89: }
  1316                           ;teclado_matricial_4x3.c: 90: return ' ';
  1317  06AA  3020               	movlw	32
  1318  06AB  0008               	return
  1319  06AC                     __end_of_teclado_matricial_read:	
  1320                           
  1321                           	psect	text5
  1322  042B                     __ptext5:	
  1323 ;; *************** function ___bmul *****************
  1324 ;; Defined at:
  1325 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul8.c"
  1326 ;; Parameters:    Size  Location     Type
  1327 ;;  multiplier      1    wreg     unsigned char 
  1328 ;;  multiplicand    1    0[COMMON] unsigned char 
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;  multiplier      1    3[COMMON] unsigned char 
  1331 ;;  product         1    2[COMMON] unsigned char 
  1332 ;; Return value:  Size  Location     Type
  1333 ;;                  1    wreg      unsigned char 
  1334 ;; Registers used:
  1335 ;;		wreg, status,2, status,0
  1336 ;; Tracked objects:
  1337 ;;		On entry : 0/0
  1338 ;;		On exit  : 0/0
  1339 ;;		Unchanged: 0/0
  1340 ;; Data sizes:     COMMON   BANK0   BANK1
  1341 ;;      Params:         1       0       0
  1342 ;;      Locals:         2       0       0
  1343 ;;      Temps:          1       0       0
  1344 ;;      Totals:         4       0       0
  1345 ;;Total ram usage:        4 bytes
  1346 ;; Hardware stack levels used:    1
  1347 ;; This function calls:
  1348 ;;		Nothing
  1349 ;; This function is called by:
  1350 ;;		_teclado_matricial_read
  1351 ;; This function uses a non-reentrant model
  1352 ;;
  1353                           
  1354                           
  1355                           ;psect for function ___bmul
  1356  042B                     ___bmul:	
  1357                           
  1358                           ;incstack = 0
  1359                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1360                           ;___bmul@multiplier stored from wreg
  1361  042B  00F3               	movwf	___bmul@multiplier
  1362  042C  01F2               	clrf	___bmul@product
  1363  042D                     l1148:	
  1364  042D  1C73               	btfss	___bmul@multiplier,0
  1365  042E  2C33               	goto	l1152
  1366  042F  0870               	movf	___bmul@multiplicand,w
  1367  0430  00F1               	movwf	??___bmul
  1368  0431  0871               	movf	??___bmul,w
  1369  0432  07F2               	addwf	___bmul@product,f
  1370  0433                     l1152:	
  1371  0433  1003               	clrc
  1372  0434  0DF0               	rlf	___bmul@multiplicand,f
  1373  0435  1003               	clrc
  1374  0436  0CF3               	rrf	___bmul@multiplier,f
  1375  0437  0873               	movf	___bmul@multiplier,w
  1376  0438  1D03               	btfss	3,2
  1377  0439  2C2D               	goto	l1148
  1378  043A  0872               	movf	___bmul@product,w
  1379  043B  0008               	return
  1380  043C                     __end_of___bmul:	
  1381                           
  1382                           	psect	text6
  1383  0555                     __ptext6:	
  1384 ;; *************** function _PORTC_write *****************
  1385 ;; Defined at:
  1386 ;;		line 39 in file "teclado_matricial_4x3.c"
  1387 ;; Parameters:    Size  Location     Type
  1388 ;;  i               2    0[COMMON] int 
  1389 ;;  v               2    2[COMMON] unsigned int 
  1390 ;; Auto vars:     Size  Location     Type
  1391 ;;		None
  1392 ;; Return value:  Size  Location     Type
  1393 ;;                  1    wreg      void 
  1394 ;; Registers used:
  1395 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1396 ;; Tracked objects:
  1397 ;;		On entry : 0/0
  1398 ;;		On exit  : 0/0
  1399 ;;		Unchanged: 0/0
  1400 ;; Data sizes:     COMMON   BANK0   BANK1
  1401 ;;      Params:         4       0       0
  1402 ;;      Locals:         0       0       0
  1403 ;;      Temps:          0       0       0
  1404 ;;      Totals:         4       0       0
  1405 ;;Total ram usage:        4 bytes
  1406 ;; Hardware stack levels used:    1
  1407 ;; This function calls:
  1408 ;;		Nothing
  1409 ;; This function is called by:
  1410 ;;		_teclado_matricial_read
  1411 ;; This function uses a non-reentrant model
  1412 ;;
  1413                           
  1414                           
  1415                           ;psect for function _PORTC_write
  1416  0555                     _PORTC_write:	
  1417                           
  1418                           ;teclado_matricial_4x3.c: 40: if(v > 1)
  1419                           
  1420                           ;incstack = 0
  1421                           ; Regs used in _PORTC_write: [wreg-fsr0h+status,2+status,0]
  1422  0555  3000               	movlw	0
  1423  0556  0273               	subwf	PORTC_write@v+1,w
  1424  0557  3002               	movlw	2
  1425  0558  1903               	skipnz
  1426  0559  0272               	subwf	PORTC_write@v,w
  1427  055A  1803               	btfsc	3,0
  1428  055B  0008               	return
  1429  055C  2D9D               	goto	l1136
  1430  055D                     l1118:	
  1431                           ;teclado_matricial_4x3.c: 43: case 0:
  1432                           
  1433                           ;teclado_matricial_4x3.c: 42: switch(i){
  1434                           
  1435                           ;teclado_matricial_4x3.c: 41: return;
  1436                           
  1437                           
  1438                           ;teclado_matricial_4x3.c: 44: PORTCbits.RC0 = v;
  1439  055D  0C72               	rrf	PORTC_write@v,w
  1440  055E  1283               	bcf	3,5	;RP0=0, select bank0
  1441  055F  1303               	bcf	3,6	;RP1=0, select bank0
  1442  0560  1C03               	skipc
  1443  0561  1007               	bcf	7,0	;volatile
  1444  0562  1803               	skipnc
  1445  0563  1407               	bsf	7,0	;volatile
  1446                           
  1447                           ;teclado_matricial_4x3.c: 45: break;
  1448  0564  0008               	return
  1449  0565                     l1120:	
  1450                           ;teclado_matricial_4x3.c: 46: case 1:
  1451                           
  1452                           
  1453                           ;teclado_matricial_4x3.c: 47: PORTCbits.RC1 = v;
  1454  0565  0C72               	rrf	PORTC_write@v,w
  1455  0566  1283               	bcf	3,5	;RP0=0, select bank0
  1456  0567  1303               	bcf	3,6	;RP1=0, select bank0
  1457  0568  1C03               	skipc
  1458  0569  1087               	bcf	7,1	;volatile
  1459  056A  1803               	skipnc
  1460  056B  1487               	bsf	7,1	;volatile
  1461                           
  1462                           ;teclado_matricial_4x3.c: 48: break;
  1463  056C  0008               	return
  1464  056D                     l1122:	
  1465                           ;teclado_matricial_4x3.c: 49: case 2:
  1466                           
  1467                           
  1468                           ;teclado_matricial_4x3.c: 50: PORTCbits.RC2 = v;
  1469  056D  0C72               	rrf	PORTC_write@v,w
  1470  056E  1283               	bcf	3,5	;RP0=0, select bank0
  1471  056F  1303               	bcf	3,6	;RP1=0, select bank0
  1472  0570  1C03               	skipc
  1473  0571  1107               	bcf	7,2	;volatile
  1474  0572  1803               	skipnc
  1475  0573  1507               	bsf	7,2	;volatile
  1476                           
  1477                           ;teclado_matricial_4x3.c: 51: break;
  1478  0574  0008               	return
  1479  0575                     l1124:	
  1480                           ;teclado_matricial_4x3.c: 52: case 3:
  1481                           
  1482                           
  1483                           ;teclado_matricial_4x3.c: 53: PORTCbits.RC3 = v;
  1484  0575  0C72               	rrf	PORTC_write@v,w
  1485  0576  1283               	bcf	3,5	;RP0=0, select bank0
  1486  0577  1303               	bcf	3,6	;RP1=0, select bank0
  1487  0578  1C03               	skipc
  1488  0579  1187               	bcf	7,3	;volatile
  1489  057A  1803               	skipnc
  1490  057B  1587               	bsf	7,3	;volatile
  1491                           
  1492                           ;teclado_matricial_4x3.c: 54: break;
  1493  057C  0008               	return
  1494  057D                     l1126:	
  1495                           ;teclado_matricial_4x3.c: 55: case 4:
  1496                           
  1497                           
  1498                           ;teclado_matricial_4x3.c: 56: PORTCbits.RC4 = v;
  1499  057D  0C72               	rrf	PORTC_write@v,w
  1500  057E  1283               	bcf	3,5	;RP0=0, select bank0
  1501  057F  1303               	bcf	3,6	;RP1=0, select bank0
  1502  0580  1C03               	skipc
  1503  0581  1207               	bcf	7,4	;volatile
  1504  0582  1803               	skipnc
  1505  0583  1607               	bsf	7,4	;volatile
  1506                           
  1507                           ;teclado_matricial_4x3.c: 57: break;
  1508  0584  0008               	return
  1509  0585                     l1128:	
  1510                           ;teclado_matricial_4x3.c: 58: case 5:
  1511                           
  1512                           
  1513                           ;teclado_matricial_4x3.c: 59: PORTCbits.RC5 = v;
  1514  0585  0C72               	rrf	PORTC_write@v,w
  1515  0586  1283               	bcf	3,5	;RP0=0, select bank0
  1516  0587  1303               	bcf	3,6	;RP1=0, select bank0
  1517  0588  1C03               	skipc
  1518  0589  1287               	bcf	7,5	;volatile
  1519  058A  1803               	skipnc
  1520  058B  1687               	bsf	7,5	;volatile
  1521                           
  1522                           ;teclado_matricial_4x3.c: 60: break;
  1523  058C  0008               	return
  1524  058D                     l1130:	
  1525                           ;teclado_matricial_4x3.c: 61: case 6:
  1526                           
  1527                           
  1528                           ;teclado_matricial_4x3.c: 62: PORTCbits.RC6 = v;
  1529  058D  0C72               	rrf	PORTC_write@v,w
  1530  058E  1283               	bcf	3,5	;RP0=0, select bank0
  1531  058F  1303               	bcf	3,6	;RP1=0, select bank0
  1532  0590  1C03               	skipc
  1533  0591  1307               	bcf	7,6	;volatile
  1534  0592  1803               	skipnc
  1535  0593  1707               	bsf	7,6	;volatile
  1536                           
  1537                           ;teclado_matricial_4x3.c: 63: break;
  1538  0594  0008               	return
  1539  0595                     l1132:	
  1540                           ;teclado_matricial_4x3.c: 64: case 7:
  1541                           
  1542                           
  1543                           ;teclado_matricial_4x3.c: 65: PORTCbits.RC7 = v;
  1544  0595  0C72               	rrf	PORTC_write@v,w
  1545  0596  1283               	bcf	3,5	;RP0=0, select bank0
  1546  0597  1303               	bcf	3,6	;RP1=0, select bank0
  1547  0598  1C03               	skipc
  1548  0599  1387               	bcf	7,7	;volatile
  1549  059A  1803               	skipnc
  1550  059B  1787               	bsf	7,7	;volatile
  1551                           
  1552                           ;teclado_matricial_4x3.c: 69: }
  1553                           
  1554                           ;teclado_matricial_4x3.c: 68: return;
  1555                           
  1556                           ;teclado_matricial_4x3.c: 67: default:
  1557                           
  1558                           ;teclado_matricial_4x3.c: 66: break;
  1559  059C  0008               	return
  1560  059D                     l1136:	
  1561                           
  1562                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1563                           ; Switch size 1, requested type "space"
  1564                           ; Number of cases is 1, Range of values is 0 to 0
  1565                           ; switch strategies available:
  1566                           ; Name         Instructions Cycles
  1567                           ; simple_byte            4     3 (average)
  1568                           ; direct_byte            7     6 (fixed)
  1569                           ; jumptable            260     6 (fixed)
  1570                           ;	Chosen strategy is simple_byte
  1571  059D  0871               	movf	PORTC_write@i+1,w
  1572  059E  3A00               	xorlw	0	; case 0
  1573  059F  1903               	skipnz
  1574  05A0  2DA2               	goto	l1478
  1575  05A1  2DAD               	goto	l79
  1576  05A2                     l1478:	
  1577                           
  1578                           ; Switch size 1, requested type "space"
  1579                           ; Number of cases is 8, Range of values is 0 to 7
  1580                           ; switch strategies available:
  1581                           ; Name         Instructions Cycles
  1582                           ; direct_byte           14     6 (fixed)
  1583                           ; simple_byte           25    13 (average)
  1584                           ; jumptable            260     6 (fixed)
  1585                           ;	Chosen strategy is direct_byte
  1586  05A2  0870               	movf	PORTC_write@i,w
  1587  05A3  0084               	movwf	4
  1588  05A4  3008               	movlw	8
  1589  05A5  0204               	subwf	4,w
  1590  05A6  1803               	skipnc
  1591  05A7  0008               	return
  1592  05A8  3000               	movlw	high S1480
  1593  05A9  008A               	movwf	10
  1594  05AA  302E               	movlw	low S1480
  1595  05AB  0704               	addwf	4,w
  1596  05AC  0082               	movwf	2
  1597  05AD                     l79:	
  1598                           ;teclado_matricial_4x3.c: 70: return;
  1599                           
  1600  05AD  0008               	return
  1601  05AE                     __end_of_PORTC_write:	
  1602                           
  1603                           	psect	swtext1
  1604  002E                     __pswtext1:	
  1605  002E                     S1480:	
  1606  002E  2D5D               	ljmp	l1118
  1607  002F  2D65               	ljmp	l1120
  1608  0030  2D6D               	ljmp	l1122
  1609  0031  2D75               	ljmp	l1124
  1610  0032  2D7D               	ljmp	l1126
  1611  0033  2D85               	ljmp	l1128
  1612  0034  2D8D               	ljmp	l1130
  1613  0035  2D95               	ljmp	l1132
  1614                           
  1615                           	psect	text7
  1616  05AE                     __ptext7:	
  1617 ;; *************** function _PORTC_read *****************
  1618 ;; Defined at:
  1619 ;;		line 16 in file "teclado_matricial_4x3.c"
  1620 ;; Parameters:    Size  Location     Type
  1621 ;;  i               2    0[COMMON] int 
  1622 ;; Auto vars:     Size  Location     Type
  1623 ;;		None
  1624 ;; Return value:  Size  Location     Type
  1625 ;;                  2    0[COMMON] unsigned int 
  1626 ;; Registers used:
  1627 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1628 ;; Tracked objects:
  1629 ;;		On entry : 0/0
  1630 ;;		On exit  : 0/0
  1631 ;;		Unchanged: 0/0
  1632 ;; Data sizes:     COMMON   BANK0   BANK1
  1633 ;;      Params:         2       0       0
  1634 ;;      Locals:         0       0       0
  1635 ;;      Temps:          3       0       0
  1636 ;;      Totals:         5       0       0
  1637 ;;Total ram usage:        5 bytes
  1638 ;; Hardware stack levels used:    1
  1639 ;; This function calls:
  1640 ;;		Nothing
  1641 ;; This function is called by:
  1642 ;;		_teclado_matricial_read
  1643 ;; This function uses a non-reentrant model
  1644 ;;
  1645                           
  1646                           
  1647                           ;psect for function _PORTC_read
  1648  05AE                     _PORTC_read:	
  1649                           
  1650                           ;teclado_matricial_4x3.c: 17: switch(i){
  1651                           
  1652                           ;incstack = 0
  1653                           ; Regs used in _PORTC_read: [wreg-fsr0h+status,2+status,0]
  1654  05AE  2E15               	goto	l1104
  1655  05AF                     l1066:	
  1656                           ;teclado_matricial_4x3.c: 18: case 0:
  1657                           
  1658                           
  1659                           ;teclado_matricial_4x3.c: 19: return PORTCbits.RC0;
  1660  05AF  1283               	bcf	3,5	;RP0=0, select bank0
  1661  05B0  1303               	bcf	3,6	;RP1=0, select bank0
  1662  05B1  0807               	movf	7,w	;volatile
  1663  05B2  3901               	andlw	1
  1664  05B3  00F2               	movwf	??_PORTC_read
  1665  05B4  01F3               	clrf	??_PORTC_read+1
  1666  05B5  0872               	movf	??_PORTC_read,w
  1667  05B6  00F0               	movwf	?_PORTC_read
  1668  05B7  0873               	movf	??_PORTC_read+1,w
  1669  05B8  00F1               	movwf	?_PORTC_read+1
  1670  05B9  0008               	return
  1671  05BA                     l1070:	
  1672                           ;teclado_matricial_4x3.c: 20: case 1:
  1673                           
  1674                           
  1675                           ;teclado_matricial_4x3.c: 21: return PORTCbits.RC1;
  1676  05BA  1283               	bcf	3,5	;RP0=0, select bank0
  1677  05BB  1303               	bcf	3,6	;RP1=0, select bank0
  1678  05BC  0C07               	rrf	7,w	;volatile
  1679  05BD  3901               	andlw	1
  1680  05BE  00F2               	movwf	??_PORTC_read
  1681  05BF  01F3               	clrf	??_PORTC_read+1
  1682  05C0  0872               	movf	??_PORTC_read,w
  1683  05C1  00F0               	movwf	?_PORTC_read
  1684  05C2  0873               	movf	??_PORTC_read+1,w
  1685  05C3  00F1               	movwf	?_PORTC_read+1
  1686  05C4  0008               	return
  1687  05C5                     l1074:	
  1688                           ;teclado_matricial_4x3.c: 22: case 2:
  1689                           
  1690                           
  1691                           ;teclado_matricial_4x3.c: 23: return PORTCbits.RC2;
  1692  05C5  1283               	bcf	3,5	;RP0=0, select bank0
  1693  05C6  1303               	bcf	3,6	;RP1=0, select bank0
  1694  05C7  0C07               	rrf	7,w	;volatile
  1695  05C8  00F2               	movwf	??_PORTC_read
  1696  05C9  0C72               	rrf	??_PORTC_read,w
  1697  05CA  3901               	andlw	1
  1698  05CB  00F3               	movwf	??_PORTC_read+1
  1699  05CC  01F4               	clrf	??_PORTC_read+2
  1700  05CD  0873               	movf	??_PORTC_read+1,w
  1701  05CE  00F0               	movwf	?_PORTC_read
  1702  05CF  0874               	movf	??_PORTC_read+2,w
  1703  05D0  00F1               	movwf	?_PORTC_read+1
  1704  05D1  0008               	return
  1705  05D2                     l1078:	
  1706                           ;teclado_matricial_4x3.c: 24: case 3:
  1707                           
  1708                           
  1709                           ;teclado_matricial_4x3.c: 25: return PORTCbits.RC3;
  1710  05D2  1283               	bcf	3,5	;RP0=0, select bank0
  1711  05D3  1303               	bcf	3,6	;RP1=0, select bank0
  1712  05D4  0C07               	rrf	7,w	;volatile
  1713  05D5  00F2               	movwf	??_PORTC_read
  1714  05D6  0CF2               	rrf	??_PORTC_read,f
  1715  05D7  0C72               	rrf	??_PORTC_read,w
  1716  05D8  3901               	andlw	1
  1717  05D9  00F3               	movwf	??_PORTC_read+1
  1718  05DA  01F4               	clrf	??_PORTC_read+2
  1719  05DB  0873               	movf	??_PORTC_read+1,w
  1720  05DC  00F0               	movwf	?_PORTC_read
  1721  05DD  0874               	movf	??_PORTC_read+2,w
  1722  05DE  00F1               	movwf	?_PORTC_read+1
  1723  05DF  0008               	return
  1724  05E0                     l1082:	
  1725                           ;teclado_matricial_4x3.c: 26: case 4:
  1726                           
  1727                           
  1728                           ;teclado_matricial_4x3.c: 27: return PORTCbits.RC4;
  1729  05E0  1283               	bcf	3,5	;RP0=0, select bank0
  1730  05E1  1303               	bcf	3,6	;RP1=0, select bank0
  1731  05E2  0E07               	swapf	7,w	;volatile
  1732  05E3  3901               	andlw	1
  1733  05E4  00F2               	movwf	??_PORTC_read
  1734  05E5  01F3               	clrf	??_PORTC_read+1
  1735  05E6  0872               	movf	??_PORTC_read,w
  1736  05E7  00F0               	movwf	?_PORTC_read
  1737  05E8  0873               	movf	??_PORTC_read+1,w
  1738  05E9  00F1               	movwf	?_PORTC_read+1
  1739  05EA  0008               	return
  1740  05EB                     l1086:	
  1741                           ;teclado_matricial_4x3.c: 28: case 5:
  1742                           
  1743                           
  1744                           ;teclado_matricial_4x3.c: 29: return PORTCbits.RC5;
  1745  05EB  1283               	bcf	3,5	;RP0=0, select bank0
  1746  05EC  1303               	bcf	3,6	;RP1=0, select bank0
  1747  05ED  0E07               	swapf	7,w	;volatile
  1748  05EE  00F2               	movwf	??_PORTC_read
  1749  05EF  0C72               	rrf	??_PORTC_read,w
  1750  05F0  3901               	andlw	1
  1751  05F1  00F3               	movwf	??_PORTC_read+1
  1752  05F2  01F4               	clrf	??_PORTC_read+2
  1753  05F3  0873               	movf	??_PORTC_read+1,w
  1754  05F4  00F0               	movwf	?_PORTC_read
  1755  05F5  0874               	movf	??_PORTC_read+2,w
  1756  05F6  00F1               	movwf	?_PORTC_read+1
  1757  05F7  0008               	return
  1758  05F8                     l1090:	
  1759                           ;teclado_matricial_4x3.c: 30: case 6:
  1760                           
  1761                           
  1762                           ;teclado_matricial_4x3.c: 31: return PORTCbits.RC6;
  1763  05F8  1283               	bcf	3,5	;RP0=0, select bank0
  1764  05F9  1303               	bcf	3,6	;RP1=0, select bank0
  1765  05FA  0E07               	swapf	7,w	;volatile
  1766  05FB  00F2               	movwf	??_PORTC_read
  1767  05FC  0CF2               	rrf	??_PORTC_read,f
  1768  05FD  0C72               	rrf	??_PORTC_read,w
  1769  05FE  3901               	andlw	1
  1770  05FF  00F3               	movwf	??_PORTC_read+1
  1771  0600  01F4               	clrf	??_PORTC_read+2
  1772  0601  0873               	movf	??_PORTC_read+1,w
  1773  0602  00F0               	movwf	?_PORTC_read
  1774  0603  0874               	movf	??_PORTC_read+2,w
  1775  0604  00F1               	movwf	?_PORTC_read+1
  1776  0605  0008               	return
  1777  0606                     l1094:	
  1778                           ;teclado_matricial_4x3.c: 32: case 7:
  1779                           
  1780                           
  1781                           ;teclado_matricial_4x3.c: 33: return PORTCbits.RC7;
  1782  0606  1283               	bcf	3,5	;RP0=0, select bank0
  1783  0607  1303               	bcf	3,6	;RP1=0, select bank0
  1784  0608  0D07               	rlf	7,w	;volatile
  1785  0609  0D07               	rlf	7,w	;volatile
  1786  060A  3901               	andlw	1
  1787  060B  00F2               	movwf	??_PORTC_read
  1788  060C  01F3               	clrf	??_PORTC_read+1
  1789  060D  0872               	movf	??_PORTC_read,w
  1790  060E  00F0               	movwf	?_PORTC_read
  1791  060F  0873               	movf	??_PORTC_read+1,w
  1792  0610  00F1               	movwf	?_PORTC_read+1
  1793  0611  0008               	return
  1794  0612                     l1098:	
  1795                           ;teclado_matricial_4x3.c: 34: default:
  1796                           
  1797                           
  1798                           ;teclado_matricial_4x3.c: 35: return 0;
  1799  0612  01F0               	clrf	?_PORTC_read
  1800  0613  01F1               	clrf	?_PORTC_read+1
  1801                           
  1802                           ;teclado_matricial_4x3.c: 36: }
  1803  0614  0008               	return
  1804  0615                     l1104:	
  1805                           
  1806                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1807                           ; Switch size 1, requested type "space"
  1808                           ; Number of cases is 1, Range of values is 0 to 0
  1809                           ; switch strategies available:
  1810                           ; Name         Instructions Cycles
  1811                           ; simple_byte            4     3 (average)
  1812                           ; direct_byte            7     6 (fixed)
  1813                           ; jumptable            260     6 (fixed)
  1814                           ;	Chosen strategy is simple_byte
  1815  0615  0871               	movf	PORTC_read@i+1,w
  1816  0616  3A00               	xorlw	0	; case 0
  1817  0617  1903               	skipnz
  1818  0618  2E1A               	goto	l1482
  1819  0619  2E12               	goto	l1098
  1820  061A                     l1482:	
  1821                           
  1822                           ; Switch size 1, requested type "space"
  1823                           ; Number of cases is 8, Range of values is 0 to 7
  1824                           ; switch strategies available:
  1825                           ; Name         Instructions Cycles
  1826                           ; direct_byte           14     6 (fixed)
  1827                           ; simple_byte           25    13 (average)
  1828                           ; jumptable            260     6 (fixed)
  1829                           ;	Chosen strategy is direct_byte
  1830  061A  0870               	movf	PORTC_read@i,w
  1831  061B  0084               	movwf	4
  1832  061C  3008               	movlw	8
  1833  061D  0204               	subwf	4,w
  1834  061E  1803               	skipnc
  1835  061F  2E12               	goto	l1098
  1836  0620  3000               	movlw	high S1484
  1837  0621  008A               	movwf	10
  1838  0622  3036               	movlw	low S1484
  1839  0623  0704               	addwf	4,w
  1840  0624  0082               	movwf	2
  1841  0625  0008               	return
  1842  0626                     __end_of_PORTC_read:	
  1843                           
  1844                           	psect	swtext2
  1845  0036                     __pswtext2:	
  1846  0036                     S1484:	
  1847  0036  2DAF               	ljmp	l1066
  1848  0037  2DBA               	ljmp	l1070
  1849  0038  2DC5               	ljmp	l1074
  1850  0039  2DD2               	ljmp	l1078
  1851  003A  2DE0               	ljmp	l1082
  1852  003B  2DEB               	ljmp	l1086
  1853  003C  2DF8               	ljmp	l1090
  1854  003D  2E06               	ljmp	l1094
  1855                           
  1856                           	psect	text8
  1857  0732                     __ptext8:	
  1858 ;; *************** function _sprintf *****************
  1859 ;; Defined at:
  1860 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  1861 ;; Parameters:    Size  Location     Type
  1862 ;;  sp              1    wreg     PTR unsigned char 
  1863 ;;		 -> sum@result(8), 
  1864 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  1865 ;;		 -> STR_2(3), 
  1866 ;; Auto vars:     Size  Location     Type
  1867 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  1868 ;;		 -> sum@result(8), 
  1869 ;;  tmpval          4    0        struct .
  1870 ;;  val             2    9[BANK0 ] unsigned int 
  1871 ;;  cp              2    0        PTR const unsigned char 
  1872 ;;  len             2    0        unsigned int 
  1873 ;;  c               1   12[BANK0 ] char 
  1874 ;;  prec            1    8[BANK0 ] char 
  1875 ;;  flag            1    7[BANK0 ] unsigned char 
  1876 ;;  ap              1    6[BANK0 ] PTR void [1]
  1877 ;;		 -> ?_sprintf(2), 
  1878 ;; Return value:  Size  Location     Type
  1879 ;;                  2    0[BANK0 ] int 
  1880 ;; Registers used:
  1881 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1882 ;; Tracked objects:
  1883 ;;		On entry : 0/0
  1884 ;;		On exit  : 0/0
  1885 ;;		Unchanged: 0/0
  1886 ;; Data sizes:     COMMON   BANK0   BANK1
  1887 ;;      Params:         0       3       0
  1888 ;;      Locals:         0       7       0
  1889 ;;      Temps:          0       3       0
  1890 ;;      Totals:         0      13       0
  1891 ;;Total ram usage:       13 bytes
  1892 ;; Hardware stack levels used:    1
  1893 ;; Hardware stack levels required when called:    1
  1894 ;; This function calls:
  1895 ;;		___lwdiv
  1896 ;;		___lwmod
  1897 ;; This function is called by:
  1898 ;;		_sum
  1899 ;; This function uses a non-reentrant model
  1900 ;;
  1901                           
  1902                           
  1903                           ;psect for function _sprintf
  1904  0732                     _sprintf:	
  1905                           
  1906                           ;incstack = 0
  1907                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1908                           ;sprintf@sp stored from wreg
  1909  0732  1283               	bcf	3,5	;RP0=0, select bank0
  1910  0733  1303               	bcf	3,6	;RP1=0, select bank0
  1911  0734  00AB               	movwf	sprintf@sp
  1912                           
  1913                           ;doprnt.c: 494: va_list ap;
  1914                           ;doprnt.c: 499: signed char c;
  1915                           ;doprnt.c: 506: signed char prec;
  1916                           ;doprnt.c: 508: unsigned char flag;
  1917                           ;doprnt.c: 523: union {
  1918                           ;doprnt.c: 524: unsigned long vd;
  1919                           ;doprnt.c: 525: double integ;
  1920                           ;doprnt.c: 526: } tmpval;
  1921                           ;doprnt.c: 528: unsigned int val;
  1922                           ;doprnt.c: 529: unsigned len;
  1923                           ;doprnt.c: 530: const char * cp;
  1924                           ;doprnt.c: 533: *ap = __va_start();
  1925  0735  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1926  0736  00A3               	movwf	??_sprintf
  1927  0737  0823               	movf	??_sprintf,w
  1928  0738  00A6               	movwf	sprintf@ap
  1929  0739                     l1316:	
  1930                           ;doprnt.c: 536: while(c = *f++) {
  1931                           
  1932  0739  3001               	movlw	1
  1933  073A  07A0               	addwf	sprintf@f,f
  1934  073B  30FF               	movlw	-1
  1935  073C  0720               	addwf	sprintf@f,w
  1936  073D  0084               	movwf	4
  1937  073E  200B               	fcall	stringdir
  1938  073F  00A3               	movwf	??_sprintf
  1939  0740  0823               	movf	??_sprintf,w
  1940  0741  00AC               	movwf	sprintf@c
  1941  0742  082C               	movf	sprintf@c,w
  1942  0743  1903               	btfsc	3,2
  1943  0744  2FE1               	goto	l1318
  1944                           
  1945                           ;doprnt.c: 538: if(c != '%')
  1946  0745  3025               	movlw	37
  1947  0746  062C               	xorwf	sprintf@c,w
  1948  0747  1903               	btfsc	3,2
  1949  0748  2F55               	goto	l1272
  1950                           
  1951                           ;doprnt.c: 540: {
  1952                           ;doprnt.c: 541: ((*sp++ = (c)));
  1953  0749  082C               	movf	sprintf@c,w
  1954  074A  00A3               	movwf	??_sprintf
  1955  074B  082B               	movf	sprintf@sp,w
  1956  074C  0084               	movwf	4
  1957  074D  0823               	movf	??_sprintf,w
  1958  074E  1383               	bcf	3,7	;select IRP bank0
  1959  074F  0080               	movwf	0
  1960  0750  3001               	movlw	1
  1961  0751  00A3               	movwf	??_sprintf
  1962  0752  0823               	movf	??_sprintf,w
  1963  0753  07AB               	addwf	sprintf@sp,f
  1964                           
  1965                           ;doprnt.c: 542: continue;
  1966  0754  2F39               	goto	l1316
  1967  0755                     l1272:	
  1968                           
  1969                           ;doprnt.c: 543: }
  1970                           ;doprnt.c: 548: flag = 0;
  1971  0755  01A7               	clrf	sprintf@flag
  1972                           
  1973                           ;doprnt.c: 822: }
  1974                           
  1975                           ;doprnt.c: 813: continue;
  1976                           
  1977                           ;doprnt.c: 802: default:
  1978                           
  1979                           ;doprnt.c: 698: case 'i':
  1980                           ;doprnt.c: 699: break;
  1981                           
  1982                           ;doprnt.c: 697: case 'd':
  1983                           
  1984                           ;doprnt.c: 638: goto alldone;
  1985                           
  1986                           ;doprnt.c: 637: case 0:
  1987                           
  1988                           ;doprnt.c: 635: switch(c = *f++) {
  1989  0756  3001               	movlw	1
  1990  0757  07A0               	addwf	sprintf@f,f
  1991  0758  30FF               	movlw	-1
  1992  0759  0720               	addwf	sprintf@f,w
  1993  075A  0084               	movwf	4
  1994  075B  200B               	fcall	stringdir
  1995  075C  00AC               	movwf	sprintf@c
  1996                           
  1997                           ; Switch size 1, requested type "space"
  1998                           ; Number of cases is 3, Range of values is 0 to 105
  1999                           ; switch strategies available:
  2000                           ; Name         Instructions Cycles
  2001                           ; simple_byte           10     6 (average)
  2002                           ; direct_byte          112     6 (fixed)
  2003                           ; jumptable            260     6 (fixed)
  2004                           ;	Chosen strategy is simple_byte
  2005  075D  3A00               	xorlw	0	; case 0
  2006  075E  1903               	skipnz
  2007  075F  2FE1               	goto	l1318
  2008  0760  3A64               	xorlw	100	; case 100
  2009  0761  1903               	skipnz
  2010  0762  2F67               	goto	l1278
  2011  0763  3A0D               	xorlw	13	; case 105
  2012  0764  1903               	skipnz
  2013  0765  2F67               	goto	l1278
  2014  0766  2F39               	goto	l1316
  2015  0767                     l1278:	
  2016                           
  2017                           ;doprnt.c: 1253: {
  2018                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2019  0767  0826               	movf	sprintf@ap,w
  2020  0768  0084               	movwf	4
  2021  0769  1383               	bcf	3,7	;select IRP bank0
  2022  076A  0800               	movf	0,w
  2023  076B  00A9               	movwf	sprintf@val
  2024  076C  0A84               	incf	4,f
  2025  076D  0800               	movf	0,w
  2026  076E  00AA               	movwf	sprintf@val+1
  2027  076F  3002               	movlw	2
  2028  0770  00A3               	movwf	??_sprintf
  2029  0771  0823               	movf	??_sprintf,w
  2030  0772  07A6               	addwf	sprintf@ap,f
  2031                           
  2032                           ;doprnt.c: 1261: if((int)val < 0) {
  2033  0773  1FAA               	btfss	sprintf@val+1,7
  2034  0774  2F7E               	goto	l1288
  2035                           
  2036                           ;doprnt.c: 1262: flag |= 0x03;
  2037  0775  3003               	movlw	3
  2038  0776  00A3               	movwf	??_sprintf
  2039  0777  0823               	movf	??_sprintf,w
  2040  0778  04A7               	iorwf	sprintf@flag,f
  2041                           
  2042                           ;doprnt.c: 1263: val = -val;
  2043  0779  09A9               	comf	sprintf@val,f
  2044  077A  09AA               	comf	sprintf@val+1,f
  2045  077B  0AA9               	incf	sprintf@val,f
  2046  077C  1903               	skipnz
  2047  077D  0AAA               	incf	sprintf@val+1,f
  2048  077E                     l1288:	
  2049                           
  2050                           ;doprnt.c: 1264: }
  2051                           ;doprnt.c: 1266: }
  2052                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2053  077E  01AC               	clrf	sprintf@c
  2054  077F  0AAC               	incf	sprintf@c,f
  2055  0780  3005               	movlw	5
  2056  0781  062C               	xorwf	sprintf@c,w
  2057  0782  1903               	btfsc	3,2
  2058  0783  2F9D               	goto	l1300
  2059  0784                     l1294:	
  2060                           
  2061                           ;doprnt.c: 1306: if(val < dpowers[c])
  2062  0784  082C               	movf	sprintf@c,w
  2063  0785  00A3               	movwf	??_sprintf
  2064  0786  0723               	addwf	??_sprintf,w
  2065  0787  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2066  0788  0084               	movwf	4
  2067  0789  200B               	fcall	stringdir
  2068  078A  00A4               	movwf	??_sprintf+1
  2069  078B  200B               	fcall	stringdir
  2070  078C  00A5               	movwf	??_sprintf+2
  2071  078D  0825               	movf	??_sprintf+2,w
  2072  078E  022A               	subwf	sprintf@val+1,w
  2073  078F  1D03               	skipz
  2074  0790  2F93               	goto	u745
  2075  0791  0824               	movf	??_sprintf+1,w
  2076  0792  0229               	subwf	sprintf@val,w
  2077  0793                     u745:	
  2078  0793  1C03               	btfss	3,0
  2079  0794  2F9D               	goto	l1300
  2080                           
  2081                           ;doprnt.c: 1307: break;
  2082  0795  3001               	movlw	1
  2083  0796  00A3               	movwf	??_sprintf
  2084  0797  0823               	movf	??_sprintf,w
  2085  0798  07AC               	addwf	sprintf@c,f
  2086  0799  3005               	movlw	5
  2087  079A  062C               	xorwf	sprintf@c,w
  2088  079B  1D03               	btfss	3,2
  2089  079C  2F84               	goto	l1294
  2090  079D                     l1300:	
  2091                           
  2092                           ;doprnt.c: 1422: {
  2093                           ;doprnt.c: 1438: if(flag & 0x03)
  2094  079D  0827               	movf	sprintf@flag,w
  2095  079E  3903               	andlw	3
  2096  079F  1903               	btfsc	3,2
  2097  07A0  2FAC               	goto	l1306
  2098                           
  2099                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2100  07A1  302D               	movlw	45
  2101  07A2  00A3               	movwf	??_sprintf
  2102  07A3  082B               	movf	sprintf@sp,w
  2103  07A4  0084               	movwf	4
  2104  07A5  0823               	movf	??_sprintf,w
  2105  07A6  1383               	bcf	3,7	;select IRP bank0
  2106  07A7  0080               	movwf	0
  2107  07A8  3001               	movlw	1
  2108  07A9  00A3               	movwf	??_sprintf
  2109  07AA  0823               	movf	??_sprintf,w
  2110  07AB  07AB               	addwf	sprintf@sp,f
  2111  07AC                     l1306:	
  2112                           
  2113                           ;doprnt.c: 1469: }
  2114                           ;doprnt.c: 1472: prec = c;
  2115  07AC  082C               	movf	sprintf@c,w
  2116  07AD  00A3               	movwf	??_sprintf
  2117  07AE  0823               	movf	??_sprintf,w
  2118  07AF  00A8               	movwf	sprintf@prec
  2119  07B0                     l1314:	
  2120                           ;doprnt.c: 1474: while(prec--) {
  2121                           
  2122  07B0  30FF               	movlw	255
  2123  07B1  00A3               	movwf	??_sprintf
  2124  07B2  0823               	movf	??_sprintf,w
  2125  07B3  07A8               	addwf	sprintf@prec,f
  2126  07B4  0A28               	incf	sprintf@prec,w
  2127  07B5  1903               	btfsc	3,2
  2128  07B6  2F39               	goto	l1316
  2129                           
  2130                           ;doprnt.c: 1478: {
  2131                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2132  07B7  300A               	movlw	10
  2133  07B8  00F8               	movwf	___lwmod@divisor
  2134  07B9  3000               	movlw	0
  2135  07BA  00F9               	movwf	___lwmod@divisor+1
  2136  07BB  0828               	movf	sprintf@prec,w
  2137  07BC  00A3               	movwf	??_sprintf
  2138  07BD  0723               	addwf	??_sprintf,w
  2139  07BE  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2140  07BF  0084               	movwf	4
  2141  07C0  200B               	fcall	stringdir
  2142  07C1  00F0               	movwf	___lwdiv@divisor
  2143  07C2  200B               	fcall	stringdir
  2144  07C3  00F1               	movwf	___lwdiv@divisor+1
  2145  07C4  082A               	movf	sprintf@val+1,w
  2146  07C5  00F3               	movwf	___lwdiv@dividend+1
  2147  07C6  0829               	movf	sprintf@val,w
  2148  07C7  00F2               	movwf	___lwdiv@dividend
  2149  07C8  2519               	fcall	___lwdiv
  2150  07C9  0871               	movf	?___lwdiv+1,w
  2151  07CA  00FB               	movwf	___lwmod@dividend+1
  2152  07CB  0870               	movf	?___lwdiv,w
  2153  07CC  00FA               	movwf	___lwmod@dividend
  2154  07CD  24E7               	fcall	___lwmod
  2155  07CE  0878               	movf	?___lwmod,w
  2156  07CF  3E30               	addlw	48
  2157  07D0  1283               	bcf	3,5	;RP0=0, select bank0
  2158  07D1  1303               	bcf	3,6	;RP1=0, select bank0
  2159  07D2  00A4               	movwf	??_sprintf+1
  2160  07D3  0824               	movf	??_sprintf+1,w
  2161  07D4  00AC               	movwf	sprintf@c
  2162                           
  2163                           ;doprnt.c: 1523: }
  2164                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2165  07D5  082C               	movf	sprintf@c,w
  2166  07D6  00A3               	movwf	??_sprintf
  2167  07D7  082B               	movf	sprintf@sp,w
  2168  07D8  0084               	movwf	4
  2169  07D9  0823               	movf	??_sprintf,w
  2170  07DA  1383               	bcf	3,7	;select IRP bank0
  2171  07DB  0080               	movwf	0
  2172  07DC  3001               	movlw	1
  2173  07DD  00A3               	movwf	??_sprintf
  2174  07DE  0823               	movf	??_sprintf,w
  2175  07DF  07AB               	addwf	sprintf@sp,f
  2176  07E0  2FB0               	goto	l1314
  2177  07E1                     l1318:	
  2178                           ;doprnt.c: 1525: }
  2179                           ;doprnt.c: 1533: }
  2180                           ;doprnt.c: 1535: alldone:
  2181                           
  2182                           
  2183                           ;doprnt.c: 1538: *sp = 0;
  2184  07E1  082B               	movf	sprintf@sp,w
  2185  07E2  0084               	movwf	4
  2186  07E3  1383               	bcf	3,7	;select IRP bank0
  2187  07E4  0180               	clrf	0
  2188  07E5  0008               	return
  2189  07E6                     __end_of_sprintf:	
  2190                           ;doprnt.c: 1540: return 0;
  2191                           ;	Return value of _sprintf is never used
  2192                           
  2193                           
  2194                           	psect	text9
  2195  04E7                     __ptext9:	
  2196 ;; *************** function ___lwmod *****************
  2197 ;; Defined at:
  2198 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  2199 ;; Parameters:    Size  Location     Type
  2200 ;;  divisor         2    8[COMMON] unsigned int 
  2201 ;;  dividend        2   10[COMMON] unsigned int 
  2202 ;; Auto vars:     Size  Location     Type
  2203 ;;  counter         1   13[COMMON] unsigned char 
  2204 ;; Return value:  Size  Location     Type
  2205 ;;                  2    8[COMMON] unsigned int 
  2206 ;; Registers used:
  2207 ;;		wreg, status,2, status,0
  2208 ;; Tracked objects:
  2209 ;;		On entry : 0/0
  2210 ;;		On exit  : 0/0
  2211 ;;		Unchanged: 0/0
  2212 ;; Data sizes:     COMMON   BANK0   BANK1
  2213 ;;      Params:         4       0       0
  2214 ;;      Locals:         1       0       0
  2215 ;;      Temps:          1       0       0
  2216 ;;      Totals:         6       0       0
  2217 ;;Total ram usage:        6 bytes
  2218 ;; Hardware stack levels used:    1
  2219 ;; This function calls:
  2220 ;;		Nothing
  2221 ;; This function is called by:
  2222 ;;		_sprintf
  2223 ;; This function uses a non-reentrant model
  2224 ;;
  2225                           
  2226                           
  2227                           ;psect for function ___lwmod
  2228  04E7                     ___lwmod:	
  2229                           
  2230                           ;incstack = 0
  2231                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2232  04E7  0878               	movf	___lwmod@divisor,w
  2233  04E8  0479               	iorwf	___lwmod@divisor+1,w
  2234  04E9  1903               	btfsc	3,2
  2235  04EA  2D14               	goto	l1204
  2236  04EB  01FD               	clrf	___lwmod@counter
  2237  04EC  0AFD               	incf	___lwmod@counter,f
  2238  04ED                     l1194:	
  2239  04ED  1BF9               	btfsc	___lwmod@divisor+1,7
  2240  04EE  2CFB               	goto	l1196
  2241  04EF  3001               	movlw	1
  2242  04F0                     u575:	
  2243  04F0  1003               	clrc
  2244  04F1  0DF8               	rlf	___lwmod@divisor,f
  2245  04F2  0DF9               	rlf	___lwmod@divisor+1,f
  2246  04F3  3EFF               	addlw	-1
  2247  04F4  1D03               	skipz
  2248  04F5  2CF0               	goto	u575
  2249  04F6  3001               	movlw	1
  2250  04F7  00FC               	movwf	??___lwmod
  2251  04F8  087C               	movf	??___lwmod,w
  2252  04F9  07FD               	addwf	___lwmod@counter,f
  2253  04FA  2CED               	goto	l1194
  2254  04FB                     l1196:	
  2255  04FB  0879               	movf	___lwmod@divisor+1,w
  2256  04FC  027B               	subwf	___lwmod@dividend+1,w
  2257  04FD  1D03               	skipz
  2258  04FE  2D01               	goto	u595
  2259  04FF  0878               	movf	___lwmod@divisor,w
  2260  0500  027A               	subwf	___lwmod@dividend,w
  2261  0501                     u595:	
  2262  0501  1C03               	skipc
  2263  0502  2D09               	goto	l1200
  2264  0503  0878               	movf	___lwmod@divisor,w
  2265  0504  02FA               	subwf	___lwmod@dividend,f
  2266  0505  0879               	movf	___lwmod@divisor+1,w
  2267  0506  1C03               	skipc
  2268  0507  03FB               	decf	___lwmod@dividend+1,f
  2269  0508  02FB               	subwf	___lwmod@dividend+1,f
  2270  0509                     l1200:	
  2271  0509  3001               	movlw	1
  2272  050A                     u605:	
  2273  050A  1003               	clrc
  2274  050B  0CF9               	rrf	___lwmod@divisor+1,f
  2275  050C  0CF8               	rrf	___lwmod@divisor,f
  2276  050D  3EFF               	addlw	-1
  2277  050E  1D03               	skipz
  2278  050F  2D0A               	goto	u605
  2279  0510  3001               	movlw	1
  2280  0511  02FD               	subwf	___lwmod@counter,f
  2281  0512  1D03               	btfss	3,2
  2282  0513  2CFB               	goto	l1196
  2283  0514                     l1204:	
  2284  0514  087B               	movf	___lwmod@dividend+1,w
  2285  0515  00F9               	movwf	?___lwmod+1
  2286  0516  087A               	movf	___lwmod@dividend,w
  2287  0517  00F8               	movwf	?___lwmod
  2288  0518  0008               	return
  2289  0519                     __end_of___lwmod:	
  2290                           
  2291                           	psect	text10
  2292  0519                     __ptext10:	
  2293 ;; *************** function ___lwdiv *****************
  2294 ;; Defined at:
  2295 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  2296 ;; Parameters:    Size  Location     Type
  2297 ;;  divisor         2    0[COMMON] unsigned int 
  2298 ;;  dividend        2    2[COMMON] unsigned int 
  2299 ;; Auto vars:     Size  Location     Type
  2300 ;;  quotient        2    5[COMMON] unsigned int 
  2301 ;;  counter         1    7[COMMON] unsigned char 
  2302 ;; Return value:  Size  Location     Type
  2303 ;;                  2    0[COMMON] unsigned int 
  2304 ;; Registers used:
  2305 ;;		wreg, status,2, status,0
  2306 ;; Tracked objects:
  2307 ;;		On entry : 0/0
  2308 ;;		On exit  : 0/0
  2309 ;;		Unchanged: 0/0
  2310 ;; Data sizes:     COMMON   BANK0   BANK1
  2311 ;;      Params:         4       0       0
  2312 ;;      Locals:         3       0       0
  2313 ;;      Temps:          1       0       0
  2314 ;;      Totals:         8       0       0
  2315 ;;Total ram usage:        8 bytes
  2316 ;; Hardware stack levels used:    1
  2317 ;; This function calls:
  2318 ;;		Nothing
  2319 ;; This function is called by:
  2320 ;;		_sprintf
  2321 ;; This function uses a non-reentrant model
  2322 ;;
  2323                           
  2324                           
  2325                           ;psect for function ___lwdiv
  2326  0519                     ___lwdiv:	
  2327                           
  2328                           ;incstack = 0
  2329                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2330  0519  01F5               	clrf	___lwdiv@quotient
  2331  051A  01F6               	clrf	___lwdiv@quotient+1
  2332  051B  0870               	movf	___lwdiv@divisor,w
  2333  051C  0471               	iorwf	___lwdiv@divisor+1,w
  2334  051D  1903               	btfsc	3,2
  2335  051E  2D50               	goto	l1182
  2336  051F  01F7               	clrf	___lwdiv@counter
  2337  0520  0AF7               	incf	___lwdiv@counter,f
  2338  0521                     l1170:	
  2339  0521  1BF1               	btfsc	___lwdiv@divisor+1,7
  2340  0522  2D2F               	goto	l1172
  2341  0523  3001               	movlw	1
  2342  0524                     u505:	
  2343  0524  1003               	clrc
  2344  0525  0DF0               	rlf	___lwdiv@divisor,f
  2345  0526  0DF1               	rlf	___lwdiv@divisor+1,f
  2346  0527  3EFF               	addlw	-1
  2347  0528  1D03               	skipz
  2348  0529  2D24               	goto	u505
  2349  052A  3001               	movlw	1
  2350  052B  00F4               	movwf	??___lwdiv
  2351  052C  0874               	movf	??___lwdiv,w
  2352  052D  07F7               	addwf	___lwdiv@counter,f
  2353  052E  2D21               	goto	l1170
  2354  052F                     l1172:	
  2355  052F  3001               	movlw	1
  2356  0530                     u525:	
  2357  0530  1003               	clrc
  2358  0531  0DF5               	rlf	___lwdiv@quotient,f
  2359  0532  0DF6               	rlf	___lwdiv@quotient+1,f
  2360  0533  3EFF               	addlw	-1
  2361  0534  1D03               	skipz
  2362  0535  2D30               	goto	u525
  2363  0536  0871               	movf	___lwdiv@divisor+1,w
  2364  0537  0273               	subwf	___lwdiv@dividend+1,w
  2365  0538  1D03               	skipz
  2366  0539  2D3C               	goto	u535
  2367  053A  0870               	movf	___lwdiv@divisor,w
  2368  053B  0272               	subwf	___lwdiv@dividend,w
  2369  053C                     u535:	
  2370  053C  1C03               	skipc
  2371  053D  2D45               	goto	l1178
  2372  053E  0870               	movf	___lwdiv@divisor,w
  2373  053F  02F2               	subwf	___lwdiv@dividend,f
  2374  0540  0871               	movf	___lwdiv@divisor+1,w
  2375  0541  1C03               	skipc
  2376  0542  03F3               	decf	___lwdiv@dividend+1,f
  2377  0543  02F3               	subwf	___lwdiv@dividend+1,f
  2378  0544  1475               	bsf	___lwdiv@quotient,0
  2379  0545                     l1178:	
  2380  0545  3001               	movlw	1
  2381  0546                     u545:	
  2382  0546  1003               	clrc
  2383  0547  0CF1               	rrf	___lwdiv@divisor+1,f
  2384  0548  0CF0               	rrf	___lwdiv@divisor,f
  2385  0549  3EFF               	addlw	-1
  2386  054A  1D03               	skipz
  2387  054B  2D46               	goto	u545
  2388  054C  3001               	movlw	1
  2389  054D  02F7               	subwf	___lwdiv@counter,f
  2390  054E  1D03               	btfss	3,2
  2391  054F  2D2F               	goto	l1172
  2392  0550                     l1182:	
  2393  0550  0876               	movf	___lwdiv@quotient+1,w
  2394  0551  00F1               	movwf	?___lwdiv+1
  2395  0552  0875               	movf	___lwdiv@quotient,w
  2396  0553  00F0               	movwf	?___lwdiv
  2397  0554  0008               	return
  2398  0555                     __end_of___lwdiv:	
  2399                           
  2400                           	psect	text11
  2401  0470                     __ptext11:	
  2402 ;; *************** function ___wmul *****************
  2403 ;; Defined at:
  2404 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  2405 ;; Parameters:    Size  Location     Type
  2406 ;;  multiplier      2    0[COMMON] unsigned int 
  2407 ;;  multiplicand    2    2[COMMON] unsigned int 
  2408 ;; Auto vars:     Size  Location     Type
  2409 ;;  product         2    4[COMMON] unsigned int 
  2410 ;; Return value:  Size  Location     Type
  2411 ;;                  2    0[COMMON] unsigned int 
  2412 ;; Registers used:
  2413 ;;		wreg, status,2, status,0
  2414 ;; Tracked objects:
  2415 ;;		On entry : 0/0
  2416 ;;		On exit  : 0/0
  2417 ;;		Unchanged: 0/0
  2418 ;; Data sizes:     COMMON   BANK0   BANK1
  2419 ;;      Params:         4       0       0
  2420 ;;      Locals:         2       0       0
  2421 ;;      Temps:          0       0       0
  2422 ;;      Totals:         6       0       0
  2423 ;;Total ram usage:        6 bytes
  2424 ;; Hardware stack levels used:    1
  2425 ;; This function calls:
  2426 ;;		Nothing
  2427 ;; This function is called by:
  2428 ;;		_sum
  2429 ;; This function uses a non-reentrant model
  2430 ;;
  2431                           
  2432                           
  2433                           ;psect for function ___wmul
  2434  0470                     ___wmul:	
  2435                           
  2436                           ;incstack = 0
  2437                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2438  0470  01F4               	clrf	___wmul@product
  2439  0471  01F5               	clrf	___wmul@product+1
  2440  0472                     l1324:	
  2441  0472  1C70               	btfss	___wmul@multiplier,0
  2442  0473  2C7A               	goto	l234
  2443  0474  0872               	movf	___wmul@multiplicand,w
  2444  0475  07F4               	addwf	___wmul@product,f
  2445  0476  1803               	skipnc
  2446  0477  0AF5               	incf	___wmul@product+1,f
  2447  0478  0873               	movf	___wmul@multiplicand+1,w
  2448  0479  07F5               	addwf	___wmul@product+1,f
  2449  047A                     l234:	
  2450  047A  3001               	movlw	1
  2451  047B                     u805:	
  2452  047B  1003               	clrc
  2453  047C  0DF2               	rlf	___wmul@multiplicand,f
  2454  047D  0DF3               	rlf	___wmul@multiplicand+1,f
  2455  047E  3EFF               	addlw	-1
  2456  047F  1D03               	skipz
  2457  0480  2C7B               	goto	u805
  2458  0481  3001               	movlw	1
  2459  0482                     u815:	
  2460  0482  1003               	clrc
  2461  0483  0CF1               	rrf	___wmul@multiplier+1,f
  2462  0484  0CF0               	rrf	___wmul@multiplier,f
  2463  0485  3EFF               	addlw	-1
  2464  0486  1D03               	skipz
  2465  0487  2C82               	goto	u815
  2466  0488  0870               	movf	___wmul@multiplier,w
  2467  0489  0471               	iorwf	___wmul@multiplier+1,w
  2468  048A  1D03               	btfss	3,2
  2469  048B  2C72               	goto	l1324
  2470  048C  0875               	movf	___wmul@product+1,w
  2471  048D  00F1               	movwf	?___wmul+1
  2472  048E  0874               	movf	___wmul@product,w
  2473  048F  00F0               	movwf	?___wmul
  2474  0490  0008               	return
  2475  0491                     __end_of___wmul:	
  2476                           
  2477                           	psect	text12
  2478  040B                     __ptext12:	
  2479 ;; *************** function _set_cursor *****************
  2480 ;; Defined at:
  2481 ;;		line 64 in file "lcd.c"
  2482 ;; Parameters:    Size  Location     Type
  2483 ;;  line            2    5[COMMON] int 
  2484 ;;  pos             2    7[COMMON] int 
  2485 ;; Auto vars:     Size  Location     Type
  2486 ;;  cursor          1   10[COMMON] unsigned char 
  2487 ;; Return value:  Size  Location     Type
  2488 ;;                  1    wreg      void 
  2489 ;; Registers used:
  2490 ;;		wreg, status,2, status,0, pclath, cstack
  2491 ;; Tracked objects:
  2492 ;;		On entry : 0/0
  2493 ;;		On exit  : 0/0
  2494 ;;		Unchanged: 0/0
  2495 ;; Data sizes:     COMMON   BANK0   BANK1
  2496 ;;      Params:         4       0       0
  2497 ;;      Locals:         1       0       0
  2498 ;;      Temps:          1       0       0
  2499 ;;      Totals:         6       0       0
  2500 ;;Total ram usage:        6 bytes
  2501 ;; Hardware stack levels used:    1
  2502 ;; Hardware stack levels required when called:    2
  2503 ;; This function calls:
  2504 ;;		_send_cmd
  2505 ;; This function is called by:
  2506 ;;		_main
  2507 ;; This function uses a non-reentrant model
  2508 ;;
  2509                           
  2510                           
  2511                           ;psect for function _set_cursor
  2512  040B                     _set_cursor:	
  2513                           
  2514                           ;lcd.c: 66: char cursor;
  2515                           ;lcd.c: 67: if(line == 0)
  2516                           
  2517                           ;incstack = 0
  2518                           ; Regs used in _set_cursor: [wreg+status,2+status,0+pclath+cstack]
  2519  040B  0875               	movf	set_cursor@line,w
  2520  040C  0476               	iorwf	set_cursor@line+1,w
  2521  040D  1D03               	btfss	3,2
  2522  040E  2C12               	goto	l1354
  2523                           
  2524                           ;lcd.c: 68: cursor = 0x80 + pos;
  2525  040F  0877               	movf	set_cursor@pos,w
  2526  0410  3E80               	addlw	128
  2527  0411  2C14               	goto	L1
  2528  0412                     l1354:	
  2529                           
  2530                           ;lcd.c: 69: else
  2531                           ;lcd.c: 70: cursor = 0xC0 + pos;
  2532  0412  0877               	movf	set_cursor@pos,w
  2533  0413  3EC0               	addlw	192
  2534  0414                     L1:	
  2535  0414  00F9               	movwf	??_set_cursor
  2536  0415  0879               	movf	??_set_cursor,w
  2537  0416  00FA               	movwf	set_cursor@cursor
  2538                           
  2539                           ;lcd.c: 71: send_cmd(cursor);
  2540  0417  087A               	movf	set_cursor@cursor,w
  2541  0418  241A               	fcall	_send_cmd
  2542  0419  0008               	return
  2543  041A                     __end_of_set_cursor:	
  2544                           
  2545                           	psect	text13
  2546  03FD                     __ptext13:	
  2547 ;; *************** function _init_LCD *****************
  2548 ;; Defined at:
  2549 ;;		line 43 in file "lcd.c"
  2550 ;; Parameters:    Size  Location     Type
  2551 ;;		None
  2552 ;; Auto vars:     Size  Location     Type
  2553 ;;		None
  2554 ;; Return value:  Size  Location     Type
  2555 ;;                  1    wreg      void 
  2556 ;; Registers used:
  2557 ;;		wreg, status,2, status,0, pclath, cstack
  2558 ;; Tracked objects:
  2559 ;;		On entry : 0/0
  2560 ;;		On exit  : 0/0
  2561 ;;		Unchanged: 0/0
  2562 ;; Data sizes:     COMMON   BANK0   BANK1
  2563 ;;      Params:         0       0       0
  2564 ;;      Locals:         0       0       0
  2565 ;;      Temps:          0       0       0
  2566 ;;      Totals:         0       0       0
  2567 ;;Total ram usage:        0 bytes
  2568 ;; Hardware stack levels used:    1
  2569 ;; Hardware stack levels required when called:    2
  2570 ;; This function calls:
  2571 ;;		_send_cmd
  2572 ;; This function is called by:
  2573 ;;		_main
  2574 ;; This function uses a non-reentrant model
  2575 ;;
  2576                           
  2577                           
  2578                           ;psect for function _init_LCD
  2579  03FD                     _init_LCD:	
  2580                           
  2581                           ;lcd.c: 45: TRISB = 0x00;
  2582                           
  2583                           ;incstack = 0
  2584                           ; Regs used in _init_LCD: [wreg+status,2+status,0+pclath+cstack]
  2585  03FD  1683               	bsf	3,5	;RP0=1, select bank1
  2586  03FE  1303               	bcf	3,6	;RP1=0, select bank1
  2587  03FF  0186               	clrf	6	;volatile
  2588                           
  2589                           ;lcd.c: 46: TRISAbits.TRISA0 = 0;
  2590  0400  1005               	bcf	5,0	;volatile
  2591                           
  2592                           ;lcd.c: 47: TRISCbits.TRISC7 = 0;
  2593  0401  1387               	bcf	7,7	;volatile
  2594                           
  2595                           ;lcd.c: 49: send_cmd(0x01);
  2596  0402  3001               	movlw	1
  2597  0403  241A               	fcall	_send_cmd
  2598                           
  2599                           ;lcd.c: 50: send_cmd(0x38);
  2600  0404  3038               	movlw	56
  2601  0405  241A               	fcall	_send_cmd
  2602                           
  2603                           ;lcd.c: 51: send_cmd(0x80);
  2604  0406  3080               	movlw	128
  2605  0407  241A               	fcall	_send_cmd
  2606                           
  2607                           ;lcd.c: 52: send_cmd(0x0C);
  2608  0408  300C               	movlw	12
  2609  0409  241A               	fcall	_send_cmd
  2610  040A  0008               	return
  2611  040B                     __end_of_init_LCD:	
  2612                           
  2613                           	psect	text14
  2614  041A                     __ptext14:	
  2615 ;; *************** function _send_cmd *****************
  2616 ;; Defined at:
  2617 ;;		line 23 in file "lcd.c"
  2618 ;; Parameters:    Size  Location     Type
  2619 ;;  cmd             1    wreg     unsigned char 
  2620 ;; Auto vars:     Size  Location     Type
  2621 ;;  cmd             1    4[COMMON] unsigned char 
  2622 ;; Return value:  Size  Location     Type
  2623 ;;                  1    wreg      void 
  2624 ;; Registers used:
  2625 ;;		wreg, status,2, status,0, pclath, cstack
  2626 ;; Tracked objects:
  2627 ;;		On entry : 0/0
  2628 ;;		On exit  : 0/0
  2629 ;;		Unchanged: 0/0
  2630 ;; Data sizes:     COMMON   BANK0   BANK1
  2631 ;;      Params:         0       0       0
  2632 ;;      Locals:         1       0       0
  2633 ;;      Temps:          2       0       0
  2634 ;;      Totals:         3       0       0
  2635 ;;Total ram usage:        3 bytes
  2636 ;; Hardware stack levels used:    1
  2637 ;; Hardware stack levels required when called:    1
  2638 ;; This function calls:
  2639 ;;		_enable
  2640 ;; This function is called by:
  2641 ;;		_init_LCD
  2642 ;;		_set_cursor
  2643 ;; This function uses a non-reentrant model
  2644 ;;
  2645                           
  2646                           
  2647                           ;psect for function _send_cmd
  2648  041A                     _send_cmd:	
  2649                           
  2650                           ;incstack = 0
  2651                           ; Regs used in _send_cmd: [wreg+status,2+status,0+pclath+cstack]
  2652                           ;send_cmd@cmd stored from wreg
  2653  041A  00F4               	movwf	send_cmd@cmd
  2654                           
  2655                           ;lcd.c: 25: PORTB = cmd;
  2656  041B  0874               	movf	send_cmd@cmd,w
  2657  041C  1283               	bcf	3,5	;RP0=0, select bank0
  2658  041D  1303               	bcf	3,6	;RP1=0, select bank0
  2659  041E  0086               	movwf	6	;volatile
  2660                           
  2661                           ;lcd.c: 26: PORTCbits.RC7 = 0;
  2662  041F  1387               	bcf	7,7	;volatile
  2663                           
  2664                           ;lcd.c: 27: enable();
  2665  0420  2491               	fcall	_enable
  2666                           
  2667                           ;lcd.c: 28: _delay((unsigned long)((1)*(16000000/4000.0)));
  2668  0421  3006               	movlw	6
  2669  0422  00F3               	movwf	??_send_cmd+1
  2670  0423  3030               	movlw	48
  2671  0424  00F2               	movwf	??_send_cmd
  2672  0425                     u947:	
  2673  0425  0BF2               	decfsz	??_send_cmd,f
  2674  0426  2C25               	goto	u947
  2675  0427  0BF3               	decfsz	??_send_cmd+1,f
  2676  0428  2C25               	goto	u947
  2677  0429  0000               	nop
  2678  042A  0008               	return
  2679  042B                     __end_of_send_cmd:	
  2680                           
  2681                           	psect	text15
  2682  0491                     __ptext15:	
  2683 ;; *************** function _enable *****************
  2684 ;; Defined at:
  2685 ;;		line 12 in file "lcd.c"
  2686 ;; Parameters:    Size  Location     Type
  2687 ;;		None
  2688 ;; Auto vars:     Size  Location     Type
  2689 ;;		None
  2690 ;; Return value:  Size  Location     Type
  2691 ;;                  1    wreg      void 
  2692 ;; Registers used:
  2693 ;;		wreg
  2694 ;; Tracked objects:
  2695 ;;		On entry : 0/0
  2696 ;;		On exit  : 0/0
  2697 ;;		Unchanged: 0/0
  2698 ;; Data sizes:     COMMON   BANK0   BANK1
  2699 ;;      Params:         0       0       0
  2700 ;;      Locals:         0       0       0
  2701 ;;      Temps:          2       0       0
  2702 ;;      Totals:         2       0       0
  2703 ;;Total ram usage:        2 bytes
  2704 ;; Hardware stack levels used:    1
  2705 ;; This function calls:
  2706 ;;		Nothing
  2707 ;; This function is called by:
  2708 ;;		_send_cmd
  2709 ;;		_send_msg
  2710 ;; This function uses a non-reentrant model
  2711 ;;
  2712                           
  2713                           
  2714                           ;psect for function _enable
  2715  0491                     _enable:	
  2716                           
  2717                           ;lcd.c: 14: PORTAbits.RA0 = 0;
  2718                           
  2719                           ;incstack = 0
  2720                           ; Regs used in _enable: [wreg]
  2721  0491  1283               	bcf	3,5	;RP0=0, select bank0
  2722  0492  1303               	bcf	3,6	;RP1=0, select bank0
  2723  0493  1005               	bcf	5,0	;volatile
  2724                           
  2725                           ;lcd.c: 15: _delay((unsigned long)((1)*(16000000/4000.0)));
  2726  0494  3006               	movlw	6
  2727  0495  00F1               	movwf	??_enable+1
  2728  0496  3030               	movlw	48
  2729  0497  00F0               	movwf	??_enable
  2730  0498                     u957:	
  2731  0498  0BF0               	decfsz	??_enable,f
  2732  0499  2C98               	goto	u957
  2733  049A  0BF1               	decfsz	??_enable+1,f
  2734  049B  2C98               	goto	u957
  2735  049C  0000               	nop
  2736                           
  2737                           ;lcd.c: 16: PORTAbits.RA0 = 1;
  2738  049D  1283               	bcf	3,5	;RP0=0, select bank0
  2739  049E  1303               	bcf	3,6	;RP1=0, select bank0
  2740  049F  1405               	bsf	5,0	;volatile
  2741                           
  2742                           ;lcd.c: 17: _delay((unsigned long)((1)*(16000000/4000.0)));
  2743  04A0  3006               	movlw	6
  2744  04A1  00F1               	movwf	??_enable+1
  2745  04A2  3030               	movlw	48
  2746  04A3  00F0               	movwf	??_enable
  2747  04A4                     u967:	
  2748  04A4  0BF0               	decfsz	??_enable,f
  2749  04A5  2CA4               	goto	u967
  2750  04A6  0BF1               	decfsz	??_enable+1,f
  2751  04A7  2CA4               	goto	u967
  2752  04A8  0000               	nop
  2753                           
  2754                           ;lcd.c: 18: PORTAbits.RA0 = 0;
  2755  04A9  1283               	bcf	3,5	;RP0=0, select bank0
  2756  04AA  1303               	bcf	3,6	;RP1=0, select bank0
  2757  04AB  1005               	bcf	5,0	;volatile
  2758                           
  2759                           ;lcd.c: 19: _delay((unsigned long)((1)*(16000000/4000.0)));
  2760  04AC  3006               	movlw	6
  2761  04AD  00F1               	movwf	??_enable+1
  2762  04AE  3030               	movlw	48
  2763  04AF  00F0               	movwf	??_enable
  2764  04B0                     u977:	
  2765  04B0  0BF0               	decfsz	??_enable,f
  2766  04B1  2CB0               	goto	u977
  2767  04B2  0BF1               	decfsz	??_enable+1,f
  2768  04B3  2CB0               	goto	u977
  2769  04B4  0000               	nop
  2770  04B5  0008               	return
  2771  04B6                     __end_of_enable:	
  2772  007E                     btemp	set	126	;btemp
  2773  007E                     wtemp0	set	126


Data Sizes:
    Strings     19
    Constant    10
    Data        12
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     30      42
    BANK1            32      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_2(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 8
		 -> sum@result(BANK0[8]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    write_LCD@c	PTR unsigned char  size(2) Largest target is 16
		 -> sum@result(BANK0[8]), STR_1(CODE[16]), 


Critical Paths under _main in COMMON

    _write_LCD->_send_msg
    _send_msg->_enable
    _teclado_matricial_read->_PORTC_read
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _set_cursor->_send_cmd
    _init_LCD->_send_cmd
    _send_cmd->_enable

Critical Paths under _main in BANK0

    _main->_sum
    _sum->_sprintf

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3931
                           _init_LCD
                         _set_cursor
                                _sum
                          _write_LCD
 ---------------------------------------------------------------------------------
 (1) _sum                                                 17    17      0    3301
                                             13 BANK0     17    17      0
                             ___wmul
                           _send_msg
                            _sprintf
             _teclado_matricial_read
                          _write_LCD
 ---------------------------------------------------------------------------------
 (1) _write_LCD                                            7     5      2     240
                                              5 COMMON     7     5      2
                           _send_msg
 ---------------------------------------------------------------------------------
 (2) _send_msg                                             3     3      0      22
                                              2 COMMON     3     3      0
                             _enable
 ---------------------------------------------------------------------------------
 (2) _teclado_matricial_read                               7     7      0    1054
                                              5 COMMON     7     7      0
                         _PORTC_read
                        _PORTC_write
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     118
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) _PORTC_write                                          4     0      4     604
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (3) _PORTC_read                                           5     3      2      86
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             21    18      3    1148
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     287
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     290
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     424
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _set_cursor                                           6     2      4     368
                                              5 COMMON     6     2      4
                           _send_cmd
 ---------------------------------------------------------------------------------
 (1) _init_LCD                                             0     0      0      22
                           _send_cmd
 ---------------------------------------------------------------------------------
 (2) _send_cmd                                             3     3      0      22
                                              2 COMMON     3     3      0
                             _enable
 ---------------------------------------------------------------------------------
 (3) _enable                                               2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init_LCD
     _send_cmd
       _enable
   _set_cursor
     _send_cmd
       _enable
   _sum
     ___wmul
     _send_msg
       _enable
     _sprintf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _teclado_matricial_read
       _PORTC_read
       _PORTC_write
       ___bmul
     _write_LCD
       _send_msg
         _enable
   _write_LCD
     _send_msg
       _enable

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               20      0       0       7        0.0%
BITBANK1            20      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1E      2A       5       52.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      38       8        0.0%
ABS                  0      0      38       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              40      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 12 15:19:37 2018

                              pc 0002          teclado_matricial_read@i 007A          teclado_matricial_read@j 0078  
                 ___bmul@product 0072                      __CFG_CP$OFF 0000                               l13 0452  
                             l79 05AD                               fsr 0004              ___wmul@multiplicand 0072  
                            l116 06FF                              l234 047A                              u505 0524  
                   __CFG_CPD$OFF 0000                              u525 0530                              u605 050A  
                            u535 053C                              u545 0546                              u705 06A8  
                            u805 047B                              u815 0482                              u575 04F0  
                            u655 0635                              u745 0793                              u595 0501  
                            u675 065B                              u917 045D                              u695 068F  
                            u927 0467                              u937 0641                              u947 0425  
                            u957 0498                              u967 04A4                              u977 04B0  
                            fsr0 0004                              _sum 06AC                              indf 0000  
                   __CFG_FOSC$HS 0000                             S1480 002E                             S1484 0036  
               set_cursor@cursor 007A                     __CFG_LVP$OFF 0000                             l1200 0509  
                           l1104 0615                             l1120 0565                             l1130 058D  
                           l1122 056D                             l1204 0514                             l1300 079D  
                           l1132 0595                             l1124 0575                             l1070 05BA  
                           l1126 057D                             l1118 055D                             l1214 04B8  
                           l1128 0585                             l1136 059D                             l1152 0433  
                           l1232 0637                             l1170 0521                             l1314 07B0  
                           l1306 07AC                             l1090 05F8                             l1082 05E0  
                           l1074 05C5                             l1066 05AF                             l1250 0680  
                           l1324 0472                             l1172 052F                             l1316 0739  
                           l1148 042D                             l1244 065D                             l1236 0647  
                           l1260 06AA                             l1182 0550                             l1318 07E1  
                           l1094 0606                             l1086 05EB                             l1078 05D2  
                           l1254 0691                             l1272 0755                             l1360 06B4  
                           l1354 0412                             l1178 0545                             l1194 04ED  
                           l1098 0612                             l1196 04FB                             l1372 06E5  
                           l1294 0784                             l1278 0767                             l1382 0714  
                           l1374 0702                             l1288 077E                             l1482 061A  
                           l1478 05A2                             STR_1 001B                             STR_2 002B  
                           ?_sum 0070                     __CFG_WRT$OFF 0000                             _main 043C  
                           btemp 007E                    __CFG_BOREN$ON 0000                             sum@c 003D  
                           start 0000                ___bmul@multiplier 0073                            ??_sum 002D  
                          ?_main 0070                    __CFG_WDTE$OFF 0000                  __end_of___lwdiv 0555  
                __end_of___lwmod 0519                            _PORTB 0006                            _TRISB 0086  
                          _TRISC 0087                      ?_PORTC_read 0070                  __end_of_dpowers 001B  
                          pclath 000A                            sum@n1 0037                            sum@n2 0039  
                          sum@op 003B                            status 0003                            wtemp0 007E  
                __end_of_sprintf 07E6         ??_teclado_matricial_read 0075                  __initialization 07E6  
                   __end_of_main 0453                           ??_main 007E                   __CFG_PWRTE$OFF 0000  
                         ___bmul 042B                           ___wmul 0470              __size_of_PORTC_read 0078  
                         _enable 0491                        ??___lwdiv 0074                 __end_of_init_LCD 040B  
                      ??___lwmod 007C                     ?_PORTC_write 0070                           _matriz 003E  
               __end_of_send_cmd 042B                 __end_of_send_msg 0470                        ??_sprintf 0023  
        __end_of__initialization 07FE              ___bmul@multiplicand 0070  __size_of_teclado_matricial_read 0086  
                 __pcstackCOMMON 0070                     __pidataBANK0 03F1                       __pmaintext 043C  
                        ?___bmul 0070                          ?___wmul 0070                          ?_enable 0070  
         _teclado_matricial_read 0626                      send_cmd@cmd 0074                     ??_PORTC_read 0072  
                     __stringtab 0001                        ?_init_LCD 0070                      send_msg@msg 0074  
             __size_of_write_LCD 0031                        ?_send_cmd 0070                        ?_send_msg 0070  
                __size_of___bmul 0011                  __size_of___wmul 0021                          ___lwdiv 0519  
                        ___lwmod 04E7                  __size_of_enable 0025               __end_of_PORTC_read 0626  
                        __ptext1 06AC                          __ptext2 04B6                          __ptext3 0453  
                        __ptext4 0626                          __ptext5 042B                          __ptext6 0555  
                        __ptext7 05AE                          __ptext8 0732                          __ptext9 04E7  
           __size_of_PORTC_write 0059                          _dpowers 0011                     __size_of_sum 0086  
                        _sprintf 0732             end_of_initialization 07FE                       ??_init_LCD 0075  
                    PORTC_read@i 0070                       ??_send_cmd 0072                       ??_send_msg 0072  
                     _set_cursor 040B                        _PORTAbits 0005                        _PORTCbits 0007  
              __end_of_write_LCD 04E7                        _TRISAbits 0085                        _TRISCbits 0087  
                 set_cursor@line 0075                   __end_of___bmul 043C                   __end_of___wmul 0491  
                 __end_of_enable 04B6              start_initialization 07E6                      __end_of_sum 0732  
                    ?_set_cursor 0075                         ??___bmul 0071                         ??___wmul 0074  
                       ??_enable 0070                      __pdataBANK0 003E          ?_teclado_matricial_read 0070  
                      ___latbits 0000                    __pcstackBANK0 0020                      sprintf@flag 0027  
                    sprintf@prec 0028                __size_of_init_LCD 000E                 ___lwdiv@dividend 0072  
              __size_of_send_cmd 0011                __size_of_send_msg 001D                         ?___lwdiv 0070  
                       ?___lwmod 0078   __end_of_teclado_matricial_read 06AC                        __pstrings 0001  
                      __pswtext1 002E                        __pswtext2 0036                 ___lwdiv@quotient 0075  
            __size_of_set_cursor 000F                         ?_sprintf 0020                   ___wmul@product 0074  
                  ??_PORTC_write 0074                      __stringbase 0010                ___wmul@multiplier 0070  
                  set_cursor@pos 0077                        _write_LCD 04B6                 __size_of___lwdiv 003C  
               __size_of___lwmod 0032               __end_of__stringtab 0011                       sprintf@val 0029  
            __end_of_PORTC_write 05AE                  ___lwdiv@divisor 0070                  ___lwdiv@counter 0077  
                     ?_write_LCD 0075                         __ptext10 0519                         __ptext11 0470  
                       __ptext12 040B                         __ptext13 03FD                         __ptext14 041A  
                       __ptext15 0491                 __size_of_sprintf 00B4                         _init_LCD 03FD  
                  __size_of_main 0017                         _send_cmd 041A                         _send_msg 0453  
                     write_LCD@c 0075                       write_LCD@i 007A                     ??_set_cursor 0079  
                      sum@result 002F               __end_of_set_cursor 041A                        sprintf@ap 0026  
                      sprintf@sp 002B                     PORTC_write@i 0070                     PORTC_write@v 0072  
               ___lwmod@dividend 007A                        stringcode 000B                      _PORTC_write 0555  
                       sprintf@c 002C                         sprintf@f 0020                  ___lwmod@divisor 0078  
                ___lwmod@counter 007D                         stringdir 000B                         stringtab 0001  
                    ??_write_LCD 0077                       _PORTC_read 05AE  
